import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  console.log('API route called');
  
  try {
    console.log('Parsing request body...');
    const data = await request.json();
    console.log('Received data:', JSON.stringify(data, null, 2));
    
    // Validate required fields
    if (!data.firstName || !data.lastName || !data.email || !data.company) {
      console.log('Validation failed - missing required fields');
      return NextResponse.json(
        { success: false, error: 'Missing required fields' },
        { status: 400 }
      );
    }
    
    console.log('Validation passed');

    console.log('Preparing form data...');
    
    // Put everything else in the request details field
    const requestDetails = `PENETRATION TEST REQUEST

Company: ${data.company}
Job Title: ${data.jobTitle || 'Not specified'}
Phone: ${data.phone || 'Not provided'}

${data.detailedRequirements}

CONSENT STATUS:
- Data Privacy Consent: ${data.dataPrivacyConsent ? 'Accepted' : 'Not Accepted'}
- Marketing Communications: ${data.marketingConsent ? 'Opted In' : 'Opted Out'}`;

    console.log('Request details prepared:', requestDetails.substring(0, 200) + '...');

    // Prepare HubSpot form submission data in JSON format
    const hubspotPayload = {
      fields: [
        {
          name: 'firstname',
          value: data.firstName
        },
        {
          name: 'lastname',
          value: data.lastName
        },
        {
          name: 'email',
          value: data.email
        },
        {
          name: 'pentest_site_text',
          value: requestDetails
        }
      ],
      context: {
        pageUri: 'https://v0-ai-fukd-my-site.vercel.app/build-pentest',
        pageName: 'Build a Pentest'
      }
    };
    
    console.log('Form data prepared:', JSON.stringify(hubspotPayload, null, 2));

    console.log('Submitting to HubSpot...');
    
    // Submit to new pentest-specific HubSpot form
    const hubspotResponse = await fetch(
      `https://api.hsforms.com/submissions/v3/integration/submit/144330761/c2e37ac5-ad29-4802-8f49-f7367bb5bb77`,
      {
        method: 'POST',
        body: JSON.stringify(hubspotPayload),
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
      }
    );
    
    console.log('HubSpot response status:', hubspotResponse.status);

    if (hubspotResponse.ok) {
      const responseData = await hubspotResponse.text();
      console.log('HubSpot submission successful:', responseData);
      
      // Try to parse response to see what was accepted
      try {
        const parsedResponse = JSON.parse(responseData);
        console.log('HubSpot accepted fields:', parsedResponse);
      } catch (e) {
        console.log('HubSpot response was not JSON:', responseData);
      }
      
      return NextResponse.json({ success: true });
    } else {
      const errorText = await hubspotResponse.text();
      console.error('HubSpot submission failed:', {
        status: hubspotResponse.status,
        statusText: hubspotResponse.statusText,
        error: errorText,
        submittedData: hubspotPayload
      });
      return NextResponse.json(
        { success: false, error: `HubSpot API error: ${hubspotResponse.status} - ${errorText}` },
        { status: 500 }
      );
    }

  } catch (error: any) {
    console.error('Pentest request API error:', error);
    
    // Return detailed error information for debugging
    const errorDetails = {
      success: false,
      error: 'Internal server error',
      details: {
        message: error.message || 'Unknown error',
        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined,
        type: error.constructor.name,
        // Include first 100 chars of received data for debugging
        receivedData: typeof error === 'object' && error.data ? 
          JSON.stringify(error.data).substring(0, 100) + '...' : 
          'No data context'
      }
    };
    
    return NextResponse.json(errorDetails, { status: 500 });
  }
}