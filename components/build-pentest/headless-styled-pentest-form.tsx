"use client"

import type React from "react"
import { useState, useMemo, useCallback, useActionState, useOptimistic, Fragment } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Checkbox } from "@/components/ui/checkbox"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { CheckCircle, Shield, Building, Users, MapPin, DollarSign, Calendar, Mail, Phone, Target, Globe, Server, Cloud, Code, Smartphone, X, ChevronDown } from "lucide-react"
import { Listbox, Transition, RadioGroup, Disclosure, Switch } from "@headlessui/react"
import { cn } from "@/lib/utils"
import ScrollAnimation from "../scroll-animation"
import { submitPentestForm } from "@/lib/actions"

// Keep all the original data structures
const industryAPTs = {
 financial: [
 {
 id: "lazarus",
 name: "Lazarus Group (APT38)",
 description: "North Korean group targeting financial institutions and SWIFT networks",
 },
 {
 id: "carbanak",
 name: "Carbanak/FIN7",
 description: "Financially motivated group targeting payment systems and banks",
 },
 {
 id: "cobalt",
 name: "Cobalt Group",
 description: "Cybercriminal group specializing in ATM and payment card attacks",
 },
 { id: "fin6", name: "FIN6", description: "Financial threat group targeting point-of-sale systems" },
 ],
 government: [
 {
 id: "cozy_bear",
 name: "Cozy Bear (APT29)",
 description: "Russian foreign intelligence service targeting government agencies",
 },
 {
 id: "fancy_bear",
 name: "Fancy Bear (APT28)",
 description: "Russian military intelligence group targeting defense and government",
 },
 {
 id: "comment_crew",
 name: "Comment Crew (APT1)",
 description: "Chinese group conducting cyber espionage against government targets",
 },
 { id: "turla", name: "Turla (APT29)", description: "Russian group targeting government and diplomatic entities" },
 {
 id: "kimsuky",
 name: "Kimsuky (APT43)",
 description: "North Korean group targeting government and defense organizations",
 },
 ],
 energy: [
 {
 id: "sandworm",
 name: "Sandworm (APT44)",
 description: "Russian group targeting critical infrastructure and energy facilities",
 },
 {
 id: "oilrig",
 name: "OilRig/Quilin (APT34)",
 description: "Iranian group targeting energy and government sectors",
 },
 { id: "elfin", name: "Elfin (APT33)", description: "Iranian group focusing on aviation and energy companies" },
 ],
 technology: [
 {
 id: "winnti",
 name: "Winnti Group (APT41)",
 description: "Chinese group targeting technology companies and software supply chains",
 },
 {
 id: "stone_panda",
 name: "Stone Panda (APT10)",
 description: "Chinese group targeting technology and intellectual property",
 },
 {
 id: "deep_panda",
 name: "Deep Panda (APT19)",
 description: "Chinese group targeting technology and healthcare sectors",
 },
 ],
 telecommunications: [
 { id: "apt10", name: "APT10", description: "Chinese group targeting telecommunications infrastructure" },
 {
 id: "mustang_panda",
 name: "Mustang Panda (APT27)",
 description: "Chinese group targeting telecommunications and government",
 },
 { id: "reaper", name: "Reaper (APT37)", description: "North Korean group targeting telecommunications and media" },
 ],
 healthcare: [
 {
 id: "winnti_apt41",
 name: "Winnti/APT41",
 description: "Chinese group targeting healthcare data and pharmaceutical research",
 },
 {
 id: "wizard_spider",
 name: "Wizard Spider",
 description: "Ransomware group frequently targeting healthcare institutions",
 },
 ],
}

const aptGroups = [
 {
 id: "lazarus",
 name: "Lazarus Group (APT38)",
 description: "North Korean group targeting financial institutions and SWIFT networks",
 industry: "Financial Services",
 },
 {
 id: "carbanak",
 name: "Carbanak/FIN7",
 description: "Financially motivated group targeting payment systems and banks",
 industry: "Financial Services",
 },
 {
 id: "cozy_bear",
 name: "Cozy Bear (APT29)",
 description: "Russian foreign intelligence service targeting government agencies",
 industry: "Government/Defense",
 },
 {
 id: "fancy_bear",
 name: "Fancy Bear (APT28)",
 description: "Russian military intelligence group targeting defense and government",
 industry: "Government/Defense",
 },
 {
 id: "sandworm",
 name: "Sandworm (APT44)",
 description: "Russian group targeting critical infrastructure and energy facilities",
 industry: "Energy/Utilities",
 },
 {
 id: "winnti",
 name: "Winnti Group (APT41)",
 description: "Chinese group targeting technology companies and software supply chains",
 industry: "Technology/IT",
 },
]

const industries = [
 { value: "financial", label: "Financial Services", icon: DollarSign },
 { value: "government", label: "Government/Defense", icon: Building },
 { value: "energy", label: "Energy/Utilities", icon: Target },
 { value: "technology", label: "Technology/IT", icon: Code },
 { value: "telecommunications", label: "Telecommunications", icon: Phone },
 { value: "healthcare", label: "Healthcare/Pharmaceutical", icon: Shield },
 { value: "other", label: "Other", icon: Globe }
]

const testingTypes = [
 { id: "web", name: "Web Application Testing", icon: Globe },
 { id: "network", name: "Network Penetration Testing", icon: Server },
 { id: "cloud", name: "Cloud Security Assessment", icon: Cloud },
 { id: "mobile", name: "Mobile Application Testing", icon: Smartphone },
 { id: "social", name: "Social Engineering", icon: Users },
 { id: "physical", name: "Physical Security", icon: Building },
]

const complianceFrameworks = [
 { id: "pci", name: "PCI DSS" },
 { id: "hipaa", name: "HIPAA" },
 { id: "gdpr", name: "GDPR" },
 { id: "iso27001", name: "ISO 27001" },
 { id: "soc2", name: "SOC 2" },
 { id: "nist", name: "NIST" },
]

export default function HeadlessStyledPentestForm() {
 const [formData, setFormData] = useState({
 companyName: "",
 industry: "",
 companySize: "",
 testingType: [] as string[],
 compliance: [] as string[],
 aptGroups: [] as string[],
 customRequirements: "",
 timeline: "",
 contactName: "",
 contactEmail: "",
 contactPhone: "",
 additionalInfo: "",
 })

 const [selectedIndustry, setSelectedIndustry] = useState(industries[0])
 const [showAllAPTs, setShowAllAPTs] = useState(false)

 const relevantAPTs = useMemo(() => {
 if (showAllAPTs) return aptGroups
 return industryAPTs[selectedIndustry.value as keyof typeof industryAPTs] || []
 }, [selectedIndustry, showAllAPTs])

 const [optimisticMessage, addOptimisticMessage] = useOptimistic<
 { message: string; type: "success" | "error" } | null,
 { message: string; type: "success" | "error" }
 >(null, (state, newMessage) => newMessage)

 const [state, formAction, isPending] = useActionState(
 async (prevState: any, formData: FormData) => {
 addOptimisticMessage({ message: "Submitting your pentest request...", type: "success" })
 try {
 const result = await submitPentestForm(prevState, formData)
 if (result.success) {
 addOptimisticMessage({ message: result.message || "Success!", type: "success" })
 // Reset form
 setFormData({
 companyName: "",
 industry: "",
 companySize: "",
 testingType: [],
 compliance: [],
 aptGroups: [],
 customRequirements: "",
 timeline: "",
 contactName: "",
 contactEmail: "",
 contactPhone: "",
 additionalInfo: "",
 })
 } else {
 addOptimisticMessage({ message: result.message || "Error occurred", type: "error" })
 }
 return result
 } catch (error) {
 const errorMessage = error instanceof Error ? error.message : "An unexpected error occurred"
 addOptimisticMessage({ message: errorMessage, type: "error" })
 return { success: false, message: errorMessage }
 }
 },
 { success: false, message: "" },
 )

 const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
 e.preventDefault()
 const formDataToSubmit = new FormData(e.currentTarget)
 
 // Add array fields
 formData.testingType.forEach(type => formDataToSubmit.append("testingType", type))
 formData.compliance.forEach(comp => formDataToSubmit.append("compliance", comp))
 formData.aptGroups.forEach(apt => formDataToSubmit.append("aptGroups", apt))
 formDataToSubmit.set("industry", selectedIndustry.value)
 
 formAction(formDataToSubmit)
 }

 return (
 <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-50 via-charcoal/95 to-charcoal">
 <div className="container py-12">
 <ScrollAnimation animation="fade">
 <div className="text-center mb-12">
 <h1 className="text-4xl md:text-5xl font-bold text-charcoal mb-4">
 Build Your Custom Pentest
 </h1>
 <p className="text-xl text-charcoal/70 max-w-3xl mx-auto">
 Configure a penetration test tailored to your organization's specific needs and threat landscape
 </p>
 </div>
 </ScrollAnimation>

 <form onSubmit={handleSubmit} className="max-w-4xl mx-auto space-y-8">
 {/* Company Information */}
 <ScrollAnimation animation="slide-up">
 <Card className="shadow-xl border-0 overflow-hidden">
 <CardHeader className="bg-gradient-to-r from-brandyellow/10 to-brandyellow/5 border-b border-brandyellow/20">
 <CardTitle className="flex items-center text-2xl">
 <Building className="w-6 h-6 mr-2 text-brandyellow" />
 Company Information
 </CardTitle>
 </CardHeader>
 <CardContent className="pt-6 space-y-6">
 <div>
 <Label htmlFor="companyName" className="text-base font-semibold mb-2 block">
 Company Name *
 </Label>
 <Input
 id="companyName"
 name="companyName"
 value={formData.companyName}
 onChange={(e) => setFormData({ ...formData, companyName: e.target.value })}
 className="text-base h-12"
 placeholder="Enter your company name"
 required
 />
 </div>

 <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
 <div>
 <Label className="text-base font-semibold mb-2 block">
 Industry *
 </Label>
 <Listbox value={selectedIndustry} onChange={setSelectedIndustry}>
 <div className="relative">
 <Listbox.Button className="relative w-full cursor-pointer rounded-lg bg-white py-3 pl-4 pr-10 text-left shadow-md focus:outline-none focus-visible:border-brandyellow focus-visible:ring-2 focus-visible:ring-brandyellow/75 focus-visible:ring-offset-2 focus-visible:ring-offset-brandyellow/25 sm:text-sm border border-gray-200 transition-all duration-200 hover:border-brandyellow/50">
 <span className="flex items-center">
 <selectedIndustry.icon className="w-5 h-5 mr-3 text-brandyellow" />
 <span className="block truncate">{selectedIndustry.label}</span>
 </span>
 <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
 <ChevronDown className="h-5 w-5 text-gray-400" />
 </span>
 </Listbox.Button>
 <Transition
 as={Fragment}
 leave="transition ease-in duration-100"
 leaveFrom="opacity-100"
 leaveTo="opacity-0"
 >
 <Listbox.Options className="absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm">
 {industries.map((industry) => (
 <Listbox.Option
 key={industry.value}
 className={({ active }) =>
 cn(
 "relative cursor-pointer select-none py-3 pl-10 pr-4 transition-colors duration-150",
 active ? "bg-brandyellow/10 text-charcoal " : "text-gray-900 "
 )
 }
 value={industry}
 >
 {({ selected }) => (
 <>
 <span className={cn("flex items-center", selected ? "font-medium" : "font-normal")}>
 <industry.icon className="w-5 h-5 mr-3 text-brandyellow" />
 {industry.label}
 </span>
 {selected ? (
 <span className="absolute inset-y-0 left-0 flex items-center pl-3 text-brandyellow">
 <CheckCircle className="h-5 w-5" />
 </span>
 ) : null}
 </>
 )}
 </Listbox.Option>
 ))}
 </Listbox.Options>
 </Transition>
 </div>
 </Listbox>
 </div>

 <div>
 <Label htmlFor="companySize" className="text-base font-semibold mb-2 block">
 Company Size
 </Label>
 <Input
 id="companySize"
 name="companySize"
 value={formData.companySize}
 onChange={(e) => setFormData({ ...formData, companySize: e.target.value })}
 className="text-base h-12"
 placeholder="e.g., 500-1000 employees"
 />
 </div>
 </div>
 </CardContent>
 </Card>
 </ScrollAnimation>

 {/* Testing Scope */}
 <ScrollAnimation animation="slide-up" delay={0.1}>
 <Card className="shadow-xl border-0 overflow-hidden">
 <CardHeader className="bg-gradient-to-r from-blue-500/10 to-cyan-500/10 border-b border-blue-500/20">
 <CardTitle className="flex items-center text-2xl">
 <Shield className="w-6 h-6 mr-2 text-blue-500" />
 Testing Scope
 </CardTitle>
 </CardHeader>
 <CardContent className="pt-6 space-y-6">
 <div>
 <Label className="text-base font-semibold mb-4 block">
 Select Testing Types *
 </Label>
 <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
 {testingTypes.map((type) => (
 <label
 key={type.id}
 className={cn(
 "flex items-center p-4 rounded-lg border-2 cursor-pointer transition-all duration-200",
 formData.testingType.includes(type.id)
 ? "border-brandyellow bg-brandyellow/5"
 : "border-gray-200 hover:border-brandyellow/50"
 )}
 >
 <Checkbox
 checked={formData.testingType.includes(type.id)}
 onCheckedChange={(checked) => {
 setFormData(prev => ({
 ...prev,
 testingType: checked
 ? [...prev.testingType, type.id]
 : prev.testingType.filter(id => id !== type.id)
 }))
 }}
 className="mr-3"
 />
 <type.icon className="w-5 h-5 mr-3 text-brandyellow" />
 <span className="font-medium text-charcoal ">{type.name}</span>
 </label>
 ))}
 </div>
 </div>

 <div>
 <Label className="text-base font-semibold mb-4 block">
 Compliance Requirements
 </Label>
 <div className="flex flex-wrap gap-3">
 {complianceFrameworks.map((framework) => (
 <label
 key={framework.id}
 className={cn(
 "inline-flex items-center px-4 py-2 rounded-full border-2 cursor-pointer transition-all duration-200",
 formData.compliance.includes(framework.id)
 ? "border-brandyellow bg-brandyellow/10 text-brandyellow"
 : "border-gray-200 hover:border-brandyellow/50"
 )}
 >
 <Checkbox
 checked={formData.compliance.includes(framework.id)}
 onCheckedChange={(checked) => {
 setFormData(prev => ({
 ...prev,
 compliance: checked
 ? [...prev.compliance, framework.id]
 : prev.compliance.filter(id => id !== framework.id)
 }))
 }}
 className="mr-2"
 />
 <span className="font-medium">{framework.name}</span>
 </label>
 ))}
 </div>
 </div>

 <div>
 <Label htmlFor="customRequirements" className="text-base font-semibold mb-2 block">
 Custom Requirements
 </Label>
 <Textarea
 id="customRequirements"
 name="customRequirements"
 value={formData.customRequirements}
 onChange={(e) => setFormData({ ...formData, customRequirements: e.target.value })}
 className="text-base min-h-[100px]"
 placeholder="Any specific requirements or areas of focus..."
 />
 </div>
 </CardContent>
 </Card>
 </ScrollAnimation>

 {/* Threat Intelligence */}
 <ScrollAnimation animation="slide-up" delay={0.2}>
 <Card className="shadow-xl border-0 overflow-hidden">
 <CardHeader className="bg-gradient-to-r from-red-500/10 to-orange-500/10 border-b border-red-500/20">
 <CardTitle className="flex items-center text-2xl">
 <Target className="w-6 h-6 mr-2 text-red-500" />
 Threat Intelligence
 </CardTitle>
 </CardHeader>
 <CardContent className="pt-6">
 <div className="mb-4 flex items-center justify-between">
 <p className="text-charcoal/70 ">
 Select threat groups to simulate based on your industry profile:
 </p>
 <Button
 type="button"
 variant="outline"
 size="sm"
 onClick={() => setShowAllAPTs(!showAllAPTs)}
 className="text-sm"
 >
 {showAllAPTs ? "Show Industry Specific" : "See All APT Groups"}
 </Button>
 </div>
 <div className="space-y-3">
 {relevantAPTs.map((apt) => (
 <Disclosure key={apt.id}>
 {({ open }) => (
 <div className={cn(
 "rounded-lg border transition-all duration-200",
 formData.aptGroups.includes(apt.id)
 ? "border-brandyellow bg-brandyellow/5"
 : "border-gray-200 "
 )}>
 <Disclosure.Button className="flex w-full items-center justify-between px-4 py-3 text-left">
 <div className="flex items-center space-x-3">
 <Checkbox
 checked={formData.aptGroups.includes(apt.id)}
 onCheckedChange={(checked) => {
 setFormData(prev => ({
 ...prev,
 aptGroups: checked
 ? [...prev.aptGroups, apt.id]
 : prev.aptGroups.filter(id => id !== apt.id)
 }))
 }}
 onClick={(e) => e.stopPropagation()}
 />
 <span className="font-medium text-charcoal ">{apt.name}</span>
 </div>
 <ChevronDown
 className={cn(
 "h-5 w-5 text-gray-500 transition-transform duration-200",
 open ? "rotate-180" : ""
 )}
 />
 </Disclosure.Button>
 <Transition
 enter="transition duration-100 ease-out"
 enterFrom="transform scale-95 opacity-0"
 enterTo="transform scale-100 opacity-100"
 leave="transition duration-75 ease-out"
 leaveFrom="transform scale-100 opacity-100"
 leaveTo="transform scale-95 opacity-0"
 >
 <Disclosure.Panel className="px-4 pb-3 text-sm text-charcoal/70 ">
 {apt.description}
 </Disclosure.Panel>
 </Transition>
 </div>
 )}
 </Disclosure>
 ))}
 </div>
 </CardContent>
 </Card>
 </ScrollAnimation>

 {/* Timeline and Contact */}
 <ScrollAnimation animation="slide-up" delay={0.3}>
 <Card className="shadow-xl border-0 overflow-hidden">
 <CardHeader className="bg-gradient-to-r from-green-500/10 to-emerald-500/10 border-b border-green-500/20">
 <CardTitle className="flex items-center text-2xl">
 <Calendar className="w-6 h-6 mr-2 text-green-500" />
 Timeline & Contact Information
 </CardTitle>
 </CardHeader>
 <CardContent className="pt-6 space-y-6">
 <div>
 <Label htmlFor="timeline" className="text-base font-semibold mb-2 block">
 Preferred Timeline
 </Label>
 <Input
 id="timeline"
 name="timeline"
 value={formData.timeline}
 onChange={(e) => setFormData({ ...formData, timeline: e.target.value })}
 className="text-base h-12"
 placeholder="e.g., Within the next 30 days"
 />
 </div>

 <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
 <div>
 <Label htmlFor="contactName" className="text-base font-semibold mb-2 block">
 Contact Name *
 </Label>
 <Input
 id="contactName"
 name="contactName"
 value={formData.contactName}
 onChange={(e) => setFormData({ ...formData, contactName: e.target.value })}
 className="text-base h-12"
 placeholder="Your full name"
 required
 />
 </div>
 <div>
 <Label htmlFor="contactPhone" className="text-base font-semibold mb-2 block">
 Phone Number
 </Label>
 <Input
 id="contactPhone"
 name="contactPhone"
 type="tel"
 value={formData.contactPhone}
 onChange={(e) => setFormData({ ...formData, contactPhone: e.target.value })}
 className="text-base h-12"
 placeholder="+44 (0) 1234 567890"
 />
 </div>
 </div>
 <div>
 <Label htmlFor="contactEmail" className="text-base font-semibold mb-2 block">
 Email Address *
 </Label>
 <Input
 id="contactEmail"
 name="contactEmail"
 type="email"
 value={formData.contactEmail}
 onChange={(e) => setFormData({ ...formData, contactEmail: e.target.value })}
 className="text-base h-12"
 placeholder="your.email@company.com"
 required
 />
 </div>
 <div>
 <Label htmlFor="additionalInfo" className="text-base font-semibold mb-2 block">
 Additional Information
 </Label>
 <Textarea
 id="additionalInfo"
 name="additionalInfo"
 value={formData.additionalInfo}
 onChange={(e) => setFormData({ ...formData, additionalInfo: e.target.value })}
 className="text-base min-h-[120px]"
 placeholder="Any other information you'd like to share..."
 />
 </div>
 </CardContent>
 </Card>
 </ScrollAnimation>

 {/* Submit Button */}
 <div className="flex flex-col items-center space-y-4">
 <Button
 type="submit"
 size="lg"
 disabled={isPending || formData.testingType.length === 0}
 className="w-full md:w-auto bg-brandyellow hover:bg-brightyellow text-charcoal font-bold text-lg px-12 py-6 rounded-lg shadow-xl hover:shadow-2xl transform transition-all duration-200 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed"
 >
 {isPending ? (
 <span className="flex items-center">
 <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-charcoal" fill="none" viewBox="0 0 24 24">
 <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />
 <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
 </svg>
 Submitting Request...
 </span>
 ) : (
 "Request Custom Quote"
 )}
 </Button>
 
 {optimisticMessage && (
 <Transition
 show={true}
 enter="transition-opacity duration-300"
 enterFrom="opacity-0"
 enterTo="opacity-100"
 leave="transition-opacity duration-300"
 leaveFrom="opacity-100"
 leaveTo="opacity-0"
 >
 <div className={cn(
 "p-4 rounded-lg flex items-center space-x-2",
 optimisticMessage.type === "success"
 ? "bg-green-50 text-green-800 "
 : "bg-red-50 text-red-800 "
 )}>
 {optimisticMessage.type === "success" ? (
 <CheckCircle className="w-5 h-5" />
 ) : (
 <X className="w-5 h-5" />
 )}
 <span>{optimisticMessage.message}</span>
 </div>
 </Transition>
 )}
 </div>
 </form>
 </div>
 </div>
 )
}