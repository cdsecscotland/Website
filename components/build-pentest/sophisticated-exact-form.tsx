"use client"

import type React from "react"
import { useState, useMemo, useCallback, useActionState, useOptimistic, Fragment } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Checkbox } from "@/components/ui/checkbox"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { CheckCircle, Shield, Building, Users, MapPin, DollarSign, Calendar, Mail, Phone, ChevronDown } from "lucide-react"
import { Listbox, Transition, Disclosure } from "@headlessui/react"
import { cn } from "@/lib/utils"
import ScrollAnimation from "../scroll-animation"
import { submitPentestForm } from "@/lib/actions"

// Original data structures exactly as they were
const industryAPTs = {
  financial: [
    {
      id: "lazarus",
      name: "Lazarus Group (APT38)",
      description: "North Korean group targeting financial institutions and SWIFT networks",
    },
    {
      id: "carbanak",
      name: "Carbanak/FIN7",
      description: "Financially motivated group targeting payment systems and banks",
    },
    {
      id: "cobalt",
      name: "Cobalt Group",
      description: "Cybercriminal group specializing in ATM and payment card attacks",
    },
    { id: "fin6", name: "FIN6", description: "Financial threat group targeting point-of-sale systems" },
  ],
  government: [
    {
      id: "cozy_bear",
      name: "Cozy Bear (APT29)",
      description: "Russian foreign intelligence service targeting government agencies",
    },
    {
      id: "fancy_bear",
      name: "Fancy Bear (APT28)",
      description: "Russian military intelligence group targeting defense and government",
    },
    {
      id: "comment_crew",
      name: "Comment Crew (APT1)",
      description: "Chinese group conducting cyber espionage against government targets",
    },
    { id: "turla", name: "Turla (APT29)", description: "Russian group targeting government and diplomatic entities" },
    {
      id: "kimsuky",
      name: "Kimsuky (APT43)",
      description: "North Korean group targeting government and defense organizations",
    },
  ],
  energy: [
    {
      id: "sandworm",
      name: "Sandworm (APT44)",
      description: "Russian group targeting critical infrastructure and energy facilities",
    },
    {
      id: "oilrig",
      name: "OilRig/Quilin (APT34)",
      description: "Iranian group targeting energy and government sectors",
    },
    { id: "elfin", name: "Elfin (APT33)", description: "Iranian group focusing on aviation and energy companies" },
  ],
  technology: [
    {
      id: "winnti",
      name: "Winnti Group (APT41)",
      description: "Chinese group targeting technology companies and software supply chains",
    },
    {
      id: "stone_panda",
      name: "Stone Panda (APT10)",
      description: "Chinese group targeting technology and intellectual property",
    },
    {
      id: "deep_panda",
      name: "Deep Panda (APT19)",
      description: "Chinese group targeting technology and healthcare sectors",
    },
  ],
  telecommunications: [
    { id: "apt10", name: "APT10", description: "Chinese group targeting telecommunications infrastructure" },
    {
      id: "mustang_panda",
      name: "Mustang Panda (APT27)",
      description: "Chinese group targeting telecommunications and government",
    },
    { id: "reaper", name: "Reaper (APT37)", description: "North Korean group targeting telecommunications and media" },
  ],
  healthcare: [
    {
      id: "winnti_apt41",
      name: "Winnti/APT41",
      description: "Chinese group targeting healthcare data and pharmaceutical research",
    },
    {
      id: "wizard_spider",
      name: "Wizard Spider",
      description: "Ransomware group frequently targeting healthcare institutions",
    },
  ],
  aerospace: [
    {
      id: "emissary_panda",
      name: "Emissary Panda (APT27)",
      description: "Chinese group targeting aerospace and defense contractors",
    },
  ],
  maritime: [
    {
      id: "leviathan",
      name: "Leviathan (APT40)",
      description: "Chinese group targeting maritime industries and shipping companies",
    },
  ],
  education: [
    {
      id: "charming_kitten",
      name: "Charming Kitten (APT35)",
      description: "Iranian group targeting academic institutions and researchers",
    },
    {
      id: "ocean_lotus",
      name: "Ocean Lotus (APT32)",
      description: "Vietnamese group targeting academic and research organizations",
    },
  ],
  infrastructure: [
    {
      id: "sandworm_infra",
      name: "Sandworm (APT44)",
      description: "Russian group targeting critical national infrastructure",
    },
    {
      id: "equation_group",
      name: "Equation Group",
      description: "Advanced group targeting critical infrastructure worldwide",
    },
  ],
  retail: [
    { id: "fin7_retail", name: "FIN7", description: "Point-of-sale malware and payment card theft in retail" },
    { id: "carbanak_retail", name: "Carbanak", description: "Retail payment system attacks and e-commerce fraud" },
  ],
  manufacturing: [
    { id: "winnti_mfg", name: "Winnti Group", description: "Industrial espionage and intellectual property theft" },
    { id: "apt1_mfg", name: "APT1", description: "Chinese group targeting manufacturing and industrial secrets" },
  ],
  legal: [
    { id: "apt1_legal", name: "APT1", description: "Legal document and client data theft" },
    { id: "apt28_legal", name: "APT28", description: "Law firm espionage operations" },
  ],
  other: [
    { id: "apt1_general", name: "APT1", description: "General corporate espionage across industries" },
    { id: "apt28_general", name: "APT28", description: "Multi-industry targeting and espionage" },
    { id: "apt29_general", name: "APT29", description: "Broad spectrum intelligence gathering" },
  ],
}

const allAPTs = [
  {
    id: "lazarus",
    name: "Lazarus Group (APT38)",
    description: "North Korean group targeting financial institutions and SWIFT networks",
    industry: "Financial Services",
  },
  {
    id: "carbanak",
    name: "Carbanak/FIN7",
    description: "Financially motivated group targeting payment systems and banks",
    industry: "Financial Services",
  },
  {
    id: "cozy_bear",
    name: "Cozy Bear (APT29)",
    description: "Russian foreign intelligence service targeting government agencies",
    industry: "Government/Defense",
  },
  // ... (I'll include key ones for brevity)
]

const allFinancialAPTs = [
  {
    id: "lazarus",
    name: "Lazarus Group (APT38)",
    description: "North Korean group targeting financial institutions and SWIFT networks",
  },
  {
    id: "carbanak",
    name: "Carbanak/FIN7",
    description: "Financially motivated group targeting payment systems and banks",
  },
  {
    id: "cobalt",
    name: "Cobalt Group",
    description: "Cybercriminal group specializing in ATM and payment card attacks",
  },
  { id: "fin6", name: "FIN6", description: "Financial threat group targeting point-of-sale systems" },
  { id: "fin8", name: "FIN8", description: "Financial cybercriminal group targeting payment processors" },
  { id: "fin10", name: "FIN10", description: "Financially motivated threat group targeting financial data" },
  { id: "fin11", name: "FIN11", description: "Financial threat actor targeting banking and payment systems" },
  {
    id: "beagleboyz",
    name: "BeagleBoyz (APT38)",
    description: "North Korean group conducting bank heists and financial fraud",
  },
  {
    id: "bluenoroff",
    name: "Bluenoroff (APT38)",
    description: "North Korean group targeting financial institutions globally",
  },
  { id: "silence", name: "Silence Group", description: "Russian-speaking group targeting banks and payment systems" },
  { id: "moneytaker", name: "MoneyTaker", description: "Cybercriminal group targeting banks and payment processors" },
  {
    id: "evilnum",
    name: "Evilnum (APT-C-48)",
    description: "Group targeting financial technology companies and trading platforms",
  },
  {
    id: "temp_hermit",
    name: "TEMP.Hermit (APT34)",
    description: "Iranian group targeting financial institutions in the Middle East",
  },
  {
    id: "silent_librarian",
    name: "Silent Librarian/Cobalt Dickens (APT35)",
    description: "Iranian group targeting financial and academic credentials",
  },
]

const industries = [
  { value: "financial", label: "Financial Services" },
  { value: "government", label: "Government/Defense" },
  { value: "energy", label: "Energy/Utilities" },
  { value: "technology", label: "Technology/IT" },
  { value: "telecommunications", label: "Telecommunications" },
  { value: "healthcare", label: "Healthcare/Pharmaceutical" },
  { value: "aerospace", label: "Aerospace/Defense Contractors" },
  { value: "maritime", label: "Maritime/Shipping" },
  { value: "education", label: "Academic/Research" },
  { value: "infrastructure", label: "Critical National Infrastructure" },
  { value: "retail", label: "Retail & E-commerce" },
  { value: "manufacturing", label: "Manufacturing" },
  { value: "legal", label: "Legal Services" },
  { value: "other", label: "Other" },
]

const budgetRanges = [
  { value: "5k-15k", label: "£5,000 - £15,000" },
  { value: "15k-30k", label: "£15,000 - £30,000" },
  { value: "30k-50k", label: "£30,000 - £50,000" },
  { value: "50k-100k", label: "£50,000 - £100,000" },
  { value: "100k+", label: "£100,000+" },
  { value: "discuss", label: "Prefer to discuss" },
]

const timelineOptions = [
  { value: "urgent", label: "ASAP (1-2 weeks)" },
  { value: "fast", label: "Fast track (2-4 weeks)" },
  { value: "standard", label: "Standard (4-8 weeks)" },
  { value: "planned", label: "Planned (2-3 months)" },
  { value: "flexible", label: "Flexible timeline" },
]

const testReasons = [
  {
    id: "compliance",
    label: "Regulatory Compliance",
    description: "Meeting industry-specific regulations (e.g., PCI DSS, HIPAA).",
  },
  { id: "security_audit", label: "Security Audit", description: "Preparing for a security audit or certification." },
  {
    id: "new_feature",
    label: "New Feature Testing",
    description: "Ensuring the security of newly implemented features or systems.",
  },
  {
    id: "risk_assessment",
    label: "Risk Assessment",
    description: "Identifying potential vulnerabilities and risks in your infrastructure.",
  },
  {
    id: "incident_response",
    label: "Incident Response",
    description: "Validating incident response plans and capabilities.",
  },
  {
    id: "vendor_assessment",
    label: "Vendor Assessment",
    description: "Assessing the security posture of third-party vendors.",
  },
  { id: "insurance", label: "Cyber Insurance", description: "Meeting requirements for cyber insurance coverage." },
  {
    id: "due_diligence",
    label: "Mergers & Acquisitions",
    description: "Performing security due diligence for M&A activities.",
  },
  { id: "other", label: "Other", description: "Other reasons not listed." },
]

export default function SophisticatedExactForm() {
  const [serviceType, setServiceType] = useState<string>("")
  const [selectedReasons, setSelectedReasons] = useState<string[]>([])
  const [selectedIndustry, setSelectedIndustry] = useState<string>("")
  const [selectedAPTs, setSelectedAPTs] = useState<string[]>([])
  const [formData, setFormData] = useState({
    employees: "",
    locations: "",
    budget: "",
    timeline: "",
    firstName: "",
    lastName: "",
    email: "",
    phone: "",
    company: "",
    jobTitle: "",
    additionalInfo: "",
  })
  
  const [dataPrivacyConsent, setDataPrivacyConsent] = useState(false)
  const [marketingConsent, setMarketingConsent] = useState(false)
  const [showAllFinancial, setShowAllFinancial] = useState(false)
  const [showAllAPTs, setShowAllAPTs] = useState(false)

  const handleServiceTypeChange = useCallback((newServiceType: string) => {
    setServiceType(newServiceType)
    // Reset dependent fields when service type changes
    setSelectedReasons([])
    setSelectedIndustry("")
    setSelectedAPTs([])
  }, [])

  const handleReasonChange = useCallback((reasonId: string, checked: boolean) => {
    if (checked) {
      setSelectedReasons(prev => [...prev, reasonId])
    } else {
      setSelectedReasons(prev => prev.filter((id) => id !== reasonId))
    }
  }, [])

  const handleAPTChange = useCallback((aptId: string, checked: boolean) => {
    if (checked) {
      setSelectedAPTs(prev => [...prev, aptId])
    } else {
      setSelectedAPTs(prev => prev.filter((id) => id !== aptId))
    }
  }, [])

  const currentAPTs = useMemo(() => {
    if (showAllAPTs) {
      return allAPTs
    }
    if (selectedIndustry === "financial" && showAllFinancial) {
      return allFinancialAPTs
    }
    return industryAPTs[selectedIndustry as keyof typeof industryAPTs] || []
  }, [selectedIndustry, showAllFinancial, showAllAPTs])

  const [optimisticSubmitting, setOptimisticSubmitting] = useOptimistic(false)

  const [state, formAction, isPending] = useActionState(
    async (prevState: any, formData: FormData) => {
      setOptimisticSubmitting(true)
      
      if (!serviceType) {
        setOptimisticSubmitting(false)
        return { success: false, message: "Please select a service type." }
      }

      try {
        const result = await submitPentestForm(prevState, formData)
        setOptimisticSubmitting(false)
        return result
      } catch (error) {
        setOptimisticSubmitting(false)
        return { success: false, message: "An error occurred while submitting your request." }
      }
    },
    { success: false, message: "" }
  )

  const handleSubmit = (formData: FormData) => {
    // Add all the state data to formData
    formData.set("serviceType", serviceType)
    formData.set("selectedReasons", JSON.stringify(selectedReasons))
    formData.set("selectedIndustry", selectedIndustry)
    formData.set("selectedAPTs", JSON.stringify(selectedAPTs))
    
    Object.entries(formData).forEach(([key, value]) => {
      formData.set(key, value)
    })
    
    formData.set("dataPrivacyConsent", dataPrivacyConsent.toString())
    formData.set("marketingConsent", marketingConsent.toString())
    
    formAction(formData)
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-50 dark:from-charcoal via-charcoal/95 to-charcoal">
      <div className="container py-12 max-w-5xl">
        <ScrollAnimation animation="fade">
          <div className="text-center mb-16">
            <h1 className="text-4xl md:text-6xl font-bold text-charcoal dark:text-white mb-6">
              Build a Penetration Test
            </h1>
            <p className="text-xl text-charcoal/70 dark:text-white/70 max-w-3xl mx-auto">
              Create a customized penetration testing proposal tailored to your organization's specific needs, industry,
              and threat landscape.
            </p>
          </div>
        </ScrollAnimation>

        <form action={handleSubmit} className="space-y-10">
          {/* Service Type Selection */}
          <ScrollAnimation animation="slide-up" delay={0.1}>
            <Card className="shadow-xl border-0 overflow-hidden bg-white/90 dark:bg-charcoal/90 backdrop-blur-sm">
              <CardHeader className="bg-gradient-to-r from-blue-500/10 to-cyan-500/10 border-b border-blue-500/20">
                <CardTitle className="flex items-center text-2xl text-charcoal dark:text-white">
                  <Shield className="w-7 h-7 mr-3 text-blue-500" />
                  What type of security assessment do you need?
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-8">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {[
                    { id: "vulnerability-assessment", title: "Vulnerability Assessment", desc: "A systematic review of systems and networks to identify security weaknesses, misconfigurations, and missing patches without actively exploiting them." },
                    { id: "penetration-test", title: "Penetration Test", desc: "Simulated cyber attacks to actively exploit vulnerabilities and demonstrate real-world impact to your systems and data." },
                    { id: "threat-led-pentest", title: "Threat-Led Penetration Test", desc: "Advanced testing that simulates real-world attack scenarios specific to your industry and known threat actors." },
                    { id: "red-team", title: "Red Team", desc: "Full-scale adversarial simulation testing your organization's detection and response capabilities against sophisticated attacks." }
                  ].map((service) => (
                    <div
                      key={service.id}
                      className={cn(
                        "relative p-6 rounded-xl border-2 cursor-pointer transition-all duration-300 group hover:shadow-lg hover:-translate-y-1",
                        serviceType === service.id
                          ? "border-blue-500 bg-gradient-to-br from-blue-50 to-blue-100/50 dark:from-blue-900/20 dark:to-blue-800/10 shadow-lg shadow-blue-500/25"
                          : "border-gray-200 dark:border-gray-700 hover:border-blue-300 dark:hover:border-blue-600 bg-white dark:bg-charcoal/50"
                      )}
                      onClick={(e) => {
                        e.preventDefault()
                        handleServiceTypeChange(service.id)
                      }}
                    >
                      <div className="flex items-start space-x-4">
                        <div className={cn(
                          "w-5 h-5 rounded-full border-2 flex items-center justify-center mt-1 transition-all duration-200",
                          serviceType === service.id
                            ? "border-blue-500 bg-blue-500"
                            : "border-gray-300 dark:border-gray-600 group-hover:border-blue-400"
                        )}>
                          {serviceType === service.id && (
                            <div className="w-2 h-2 bg-white rounded-full" />
                          )}
                        </div>
                        <div className="flex-1">
                          <h4 className="text-lg font-bold text-charcoal dark:text-white mb-2 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
                            {service.title}
                          </h4>
                          <p className="text-sm text-charcoal/70 dark:text-white/70 leading-relaxed">
                            {service.desc}
                          </p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </ScrollAnimation>

          {/* Test Reasons - Only show for non-vulnerability assessment */}
          {serviceType && serviceType !== "vulnerability-assessment" && (
            <ScrollAnimation animation="slide-up" delay={0.2}>
              <Card className="shadow-xl border-0 overflow-hidden bg-white/90 dark:bg-charcoal/90 backdrop-blur-sm">
                <CardHeader className="bg-gradient-to-r from-green-500/10 to-emerald-500/10 border-b border-green-500/20">
                  <CardTitle className="flex items-center text-2xl text-charcoal dark:text-white">
                    <Shield className="w-7 h-7 mr-3 text-green-500" />
                    Why do you need a penetration test?
                  </CardTitle>
                </CardHeader>
                <CardContent className="pt-8">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {testReasons.map((reason) => (
                      <div
                        key={reason.id}
                        className={cn(
                          "relative p-6 rounded-xl border-2 cursor-pointer transition-all duration-300 group hover:shadow-lg hover:-translate-y-1",
                          selectedReasons.includes(reason.id)
                            ? "border-green-500 bg-gradient-to-br from-green-50 to-green-100/50 dark:from-green-900/20 dark:to-green-800/10 shadow-lg shadow-green-500/25"
                            : "border-gray-200 dark:border-gray-700 hover:border-green-300 dark:hover:border-green-600 bg-white dark:bg-charcoal/50"
                        )}
                        onClick={(e) => {
                          e.preventDefault()
                          handleReasonChange(reason.id, !selectedReasons.includes(reason.id))
                        }}
                      >
                        <div className="flex items-start space-x-4">
                          <Checkbox
                            checked={selectedReasons.includes(reason.id)}
                            onCheckedChange={(checked) => handleReasonChange(reason.id, checked === true)}
                            className="mt-1"
                            onClick={(e) => e.stopPropagation()}
                          />
                          <div className="flex-1">
                            <h4 className="text-lg font-bold text-charcoal dark:text-white mb-2 group-hover:text-green-600 dark:group-hover:text-green-400 transition-colors">
                              {reason.label}
                            </h4>
                            <p className="text-sm text-charcoal/70 dark:text-white/70 leading-relaxed">
                              {reason.description}
                            </p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </ScrollAnimation>
          )}

          {/* Industry Selection - Only show for non-vulnerability assessment */}
          {serviceType && serviceType !== "vulnerability-assessment" && (
            <ScrollAnimation animation="slide-up" delay={0.3}>
              <Card className="shadow-xl border-0 overflow-hidden bg-white/90 dark:bg-charcoal/90 backdrop-blur-sm">
                <CardHeader className="bg-gradient-to-r from-purple-500/10 to-indigo-500/10 border-b border-purple-500/20">
                  <CardTitle className="flex items-center text-2xl text-charcoal dark:text-white">
                    <Building className="w-7 h-7 mr-3 text-purple-500" />
                    What industry are you in?
                  </CardTitle>
                </CardHeader>
                <CardContent className="pt-8">
                  <Listbox value={selectedIndustry} onChange={setSelectedIndustry}>
                    <div className="relative">
                      <Listbox.Button className="relative w-full cursor-pointer rounded-xl bg-white dark:bg-charcoal py-4 pl-6 pr-12 text-left shadow-lg hover:shadow-xl focus:outline-none focus-visible:border-purple-500 focus-visible:ring-2 focus-visible:ring-purple-500/75 focus-visible:ring-offset-2 border border-gray-200 dark:border-gray-700 transition-all duration-200 hover:border-purple-300 dark:hover:border-purple-600">
                        <span className="block truncate text-lg">
                          {selectedIndustry ? industries.find(i => i.value === selectedIndustry)?.label : "Select your industry..."}
                        </span>
                        <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-4">
                          <ChevronDown className="h-5 w-5 text-gray-400" />
                        </span>
                      </Listbox.Button>
                      <Transition
                        as={Fragment}
                        leave="transition ease-in duration-100"
                        leaveFrom="opacity-100"
                        leaveTo="opacity-0"
                      >
                        <Listbox.Options className="absolute z-20 mt-2 max-h-80 w-full overflow-auto rounded-xl bg-white dark:bg-charcoal py-2 shadow-2xl ring-1 ring-black ring-opacity-5 focus:outline-none">
                          {industries.map((industry) => (
                            <Listbox.Option
                              key={industry.value}
                              className={({ active }) =>
                                cn(
                                  "relative cursor-pointer select-none py-3 pl-12 pr-6 transition-colors duration-150",
                                  active ? "bg-purple-100 text-purple-900 dark:bg-purple-800 dark:text-purple-100" : "text-gray-900 dark:text-gray-100"
                                )
                              }
                              value={industry.value}
                            >
                              {({ selected }) => (
                                <>
                                  <span className={cn("block truncate text-base", selected ? "font-semibold" : "font-normal")}>
                                    {industry.label}
                                  </span>
                                  {selected ? (
                                    <span className="absolute inset-y-0 left-0 flex items-center pl-4 text-purple-600">
                                      <CheckCircle className="h-5 w-5" aria-hidden="true" />
                                    </span>
                                  ) : null}
                                </>
                              )}
                            </Listbox.Option>
                          ))}
                        </Listbox.Options>
                      </Transition>
                    </div>
                  </Listbox>
                </CardContent>
              </Card>
            </ScrollAnimation>
          )}

          {/* APT Selection - Only show for non-vulnerability assessment */}
          {serviceType && serviceType !== "vulnerability-assessment" && selectedIndustry && currentAPTs.length > 0 && (
            <ScrollAnimation animation="slide-up" delay={0.4}>
              <Card className="shadow-xl border-0 overflow-hidden bg-white/90 dark:bg-charcoal/90 backdrop-blur-sm">
                <CardHeader className="bg-gradient-to-r from-red-500/10 to-orange-500/10 border-b border-red-500/20">
                  <div className="flex items-center justify-between flex-wrap gap-4">
                    <CardTitle className="flex items-center text-2xl text-charcoal dark:text-white">
                      <Shield className="w-7 h-7 mr-3 text-red-500" />
                      {showAllAPTs ? "All Threat Actors" : "Industry-Specific Threat Actors"}
                    </CardTitle>
                    <div className="flex gap-3">
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={() => setShowAllAPTs(!showAllAPTs)}
                        className="bg-white/80 hover:bg-white border-red-200 hover:border-red-300 text-red-700 hover:text-red-800"
                      >
                        {showAllAPTs ? "Show Industry Specific" : "See All APTs"}
                      </Button>
                      {selectedIndustry === "financial" && !showAllAPTs && (
                        <Button
                          type="button"
                          variant="outline"
                          size="sm"
                          onClick={() => setShowAllFinancial(!showAllFinancial)}
                          className="bg-white/80 hover:bg-white border-red-200 hover:border-red-300 text-red-700 hover:text-red-800"
                        >
                          {showAllFinancial ? "Show Common" : "See All Financial"}
                        </Button>
                      )}
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="pt-8">
                  <div className="space-y-4">
                    {currentAPTs.map((apt) => (
                      <Disclosure key={apt.id}>
                        {({ open }) => (
                          <div className={cn(
                            "border rounded-xl transition-all duration-200 overflow-hidden",
                            selectedAPTs.includes(apt.id)
                              ? "border-red-500 bg-gradient-to-r from-red-50 to-red-100/50 dark:from-red-900/20 dark:to-red-800/10 shadow-lg shadow-red-500/25"
                              : "border-gray-200 dark:border-gray-700 hover:border-red-300 dark:hover:border-red-600 bg-white dark:bg-charcoal/50"
                          )}>
                            <Disclosure.Button className="flex w-full items-center justify-between px-6 py-4 text-left hover:bg-gray-50 dark:hover:bg-charcoal/20 transition-colors duration-200">
                              <div className="flex items-center space-x-4">
                                <Checkbox
                                  checked={selectedAPTs.includes(apt.id)}
                                  onCheckedChange={(checked) => handleAPTChange(apt.id, checked === true)}
                                  onClick={(e) => e.stopPropagation()}
                                  className="scale-110"
                                />
                                <span className="font-semibold text-lg text-charcoal dark:text-white">{apt.name}</span>
                              </div>
                              <ChevronDown
                                className={cn(
                                  "h-5 w-5 text-gray-500 transition-transform duration-200",
                                  open ? "rotate-180" : ""
                                )}
                              />
                            </Disclosure.Button>
                            <Transition
                              enter="transition duration-200 ease-out"
                              enterFrom="transform scale-95 opacity-0"
                              enterTo="transform scale-100 opacity-100"
                              leave="transition duration-150 ease-out"
                              leaveFrom="transform scale-100 opacity-100"
                              leaveTo="transform scale-95 opacity-0"
                            >
                              <Disclosure.Panel className="px-6 pb-4 text-base text-charcoal/70 dark:text-white/70 leading-relaxed">
                                {apt.description}
                              </Disclosure.Panel>
                            </Transition>
                          </div>
                        )}
                      </Disclosure>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </ScrollAnimation>
          )}

          {/* Contact and Budget Information */}
          <ScrollAnimation animation="slide-up" delay={0.5}>
            <Card className="shadow-xl border-0 overflow-hidden bg-white/90 dark:bg-charcoal/90 backdrop-blur-sm">
              <CardHeader className="bg-gradient-to-r from-indigo-500/10 to-purple-500/10 border-b border-indigo-500/20">
                <CardTitle className="flex items-center text-2xl text-charcoal dark:text-white">
                  <Users className="w-7 h-7 mr-3 text-indigo-500" />
                  Contact Information & Project Details
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-8 space-y-8">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label htmlFor="firstName" className="text-base font-semibold mb-2 block">First Name *</Label>
                    <Input
                      id="firstName"
                      name="firstName"
                      type="text"
                      value={formData.firstName}
                      onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}
                      className="text-base h-12 rounded-lg"
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="lastName" className="text-base font-semibold mb-2 block">Last Name *</Label>
                    <Input
                      id="lastName"
                      name="lastName"
                      type="text"
                      value={formData.lastName}
                      onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}
                      className="text-base h-12 rounded-lg"
                      required
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label htmlFor="email" className="text-base font-semibold mb-2 block">Email Address *</Label>
                    <Input
                      id="email"
                      name="email"
                      type="email"
                      value={formData.email}
                      onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                      className="text-base h-12 rounded-lg"
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="phone" className="text-base font-semibold mb-2 block">Phone Number</Label>
                    <Input
                      id="phone"
                      name="phone"
                      type="tel"
                      value={formData.phone}
                      onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                      className="text-base h-12 rounded-lg"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label htmlFor="company" className="text-base font-semibold mb-2 block">Company *</Label>
                    <Input
                      id="company"
                      name="company"
                      type="text"
                      value={formData.company}
                      onChange={(e) => setFormData({ ...formData, company: e.target.value })}
                      className="text-base h-12 rounded-lg"
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="jobTitle" className="text-base font-semibold mb-2 block">Job Title</Label>
                    <Input
                      id="jobTitle"
                      name="jobTitle"
                      type="text"
                      value={formData.jobTitle}
                      onChange={(e) => setFormData({ ...formData, jobTitle: e.target.value })}
                      className="text-base h-12 rounded-lg"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label htmlFor="employees" className="text-base font-semibold mb-2 block">Number of Employees</Label>
                    <Input
                      id="employees"
                      name="employees"
                      type="text"
                      value={formData.employees}
                      onChange={(e) => setFormData({ ...formData, employees: e.target.value })}
                      placeholder="e.g., 50-100"
                      className="text-base h-12 rounded-lg"
                    />
                  </div>
                  <div>
                    <Label htmlFor="locations" className="text-base font-semibold mb-2 block">Number of Locations</Label>
                    <Input
                      id="locations"
                      name="locations"
                      type="text"
                      value={formData.locations}
                      onChange={(e) => setFormData({ ...formData, locations: e.target.value })}
                      placeholder="e.g., 3"
                      className="text-base h-12 rounded-lg"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label className="text-base font-semibold mb-2 block">Budget Range</Label>
                    <Listbox value={formData.budget} onChange={(value) => setFormData({ ...formData, budget: value })}>
                      <div className="relative">
                        <Listbox.Button className="relative w-full cursor-pointer rounded-lg bg-white dark:bg-charcoal py-3 pl-4 pr-10 text-left shadow-md focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-indigo-500/75 border border-gray-300 dark:border-gray-600 transition-all duration-200 hover:border-indigo-300">
                          <span className="block truncate">
                            {formData.budget ? budgetRanges.find(b => b.value === formData.budget)?.label : "Select budget range..."}
                          </span>
                          <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                            <ChevronDown className="h-5 w-5 text-gray-400" />
                          </span>
                        </Listbox.Button>
                        <Transition
                          as={Fragment}
                          leave="transition ease-in duration-100"
                          leaveFrom="opacity-100"
                          leaveTo="opacity-0"
                        >
                          <Listbox.Options className="absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-md bg-white dark:bg-charcoal py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none">
                            {budgetRanges.map((budget) => (
                              <Listbox.Option
                                key={budget.value}
                                className={({ active }) =>
                                  cn(
                                    "relative cursor-pointer select-none py-2 pl-10 pr-4",
                                    active ? "bg-indigo-100 text-indigo-900 dark:bg-indigo-800 dark:text-indigo-100" : "text-gray-900 dark:text-gray-100"
                                  )
                                }
                                value={budget.value}
                              >
                                {({ selected }) => (
                                  <>
                                    <span className={cn("block truncate", selected ? "font-medium" : "font-normal")}>
                                      {budget.label}
                                    </span>
                                    {selected ? (
                                      <span className="absolute inset-y-0 left-0 flex items-center pl-3 text-indigo-600">
                                        <CheckCircle className="h-5 w-5" aria-hidden="true" />
                                      </span>
                                    ) : null}
                                  </>
                                )}
                              </Listbox.Option>
                            ))}
                          </Listbox.Options>
                        </Transition>
                      </div>
                    </Listbox>
                  </div>
                  <div>
                    <Label className="text-base font-semibold mb-2 block">Preferred Timeline</Label>
                    <Listbox value={formData.timeline} onChange={(value) => setFormData({ ...formData, timeline: value })}>
                      <div className="relative">
                        <Listbox.Button className="relative w-full cursor-pointer rounded-lg bg-white dark:bg-charcoal py-3 pl-4 pr-10 text-left shadow-md focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-indigo-500/75 border border-gray-300 dark:border-gray-600 transition-all duration-200 hover:border-indigo-300">
                          <span className="block truncate">
                            {formData.timeline ? timelineOptions.find(t => t.value === formData.timeline)?.label : "Select timeline..."}
                          </span>
                          <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                            <ChevronDown className="h-5 w-5 text-gray-400" />
                          </span>
                        </Listbox.Button>
                        <Transition
                          as={Fragment}
                          leave="transition ease-in duration-100"
                          leaveFrom="opacity-100"
                          leaveTo="opacity-0"
                        >
                          <Listbox.Options className="absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-md bg-white dark:bg-charcoal py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none">
                            {timelineOptions.map((timeline) => (
                              <Listbox.Option
                                key={timeline.value}
                                className={({ active }) =>
                                  cn(
                                    "relative cursor-pointer select-none py-2 pl-10 pr-4",
                                    active ? "bg-indigo-100 text-indigo-900 dark:bg-indigo-800 dark:text-indigo-100" : "text-gray-900 dark:text-gray-100"
                                  )
                                }
                                value={timeline.value}
                              >
                                {({ selected }) => (
                                  <>
                                    <span className={cn("block truncate", selected ? "font-medium" : "font-normal")}>
                                      {timeline.label}
                                    </span>
                                    {selected ? (
                                      <span className="absolute inset-y-0 left-0 flex items-center pl-3 text-indigo-600">
                                        <CheckCircle className="h-5 w-5" aria-hidden="true" />
                                      </span>
                                    ) : null}
                                  </>
                                )}
                              </Listbox.Option>
                            ))}
                          </Listbox.Options>
                        </Transition>
                      </div>
                    </Listbox>
                  </div>
                </div>

                <div>
                  <Label htmlFor="additionalInfo" className="text-base font-semibold mb-2 block">Additional Information</Label>
                  <Textarea
                    id="additionalInfo"
                    name="additionalInfo"
                    value={formData.additionalInfo}
                    onChange={(e) => setFormData({ ...formData, additionalInfo: e.target.value })}
                    placeholder="Please provide any additional details about your requirements..."
                    className="min-h-[120px] text-base rounded-lg"
                  />
                </div>

                <div className="space-y-4 border-t border-gray-200 dark:border-gray-700 pt-6">
                  <div className="flex items-start space-x-3">
                    <Checkbox
                      id="dataPrivacyConsent"
                      checked={dataPrivacyConsent}
                      onCheckedChange={setDataPrivacyConsent}
                      className="mt-1"
                    />
                    <Label htmlFor="dataPrivacyConsent" className="text-sm leading-5">
                      I consent to the processing of my personal data for the purpose of this penetration testing
                      inquiry. *
                    </Label>
                  </div>

                  <div className="flex items-start space-x-3">
                    <Checkbox
                      id="marketingConsent"
                      checked={marketingConsent}
                      onCheckedChange={setMarketingConsent}
                      className="mt-1"
                    />
                    <Label htmlFor="marketingConsent" className="text-sm leading-5">
                      I would like to receive marketing communications about cybersecurity services and industry
                      insights.
                    </Label>
                  </div>
                </div>
              </CardContent>
            </Card>
          </ScrollAnimation>

          {/* Summary */}
          {serviceType && (
            <ScrollAnimation animation="slide-up" delay={0.6}>
              <Card className="shadow-xl border-0 overflow-hidden bg-gradient-to-r from-brandyellow/5 to-brandyellow/10 dark:from-brandyellow/10 dark:to-brandyellow/5">
                <CardHeader className="bg-gradient-to-r from-brandyellow/20 to-brandyellow/10 border-b border-brandyellow/30">
                  <CardTitle className="flex items-center text-2xl text-charcoal dark:text-white">
                    <CheckCircle className="w-7 h-7 mr-3 text-green-500" />
                    Request Summary
                  </CardTitle>
                </CardHeader>
                <CardContent className="pt-8 space-y-6">
                  <div>
                    <h4 className="font-semibold text-charcoal dark:text-white mb-3 text-lg">Service Type:</h4>
                    <Badge className="bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 px-4 py-2 text-base">
                      {serviceType === "vulnerability-assessment" && "Vulnerability Assessment"}
                      {serviceType === "penetration-test" && "Penetration Test"}
                      {serviceType === "threat-led-pentest" && "Threat-Led Penetration Test"}
                      {serviceType === "red-team" && "Red Team"}
                    </Badge>
                  </div>

                  {selectedReasons.length > 0 && (
                    <div>
                      <h4 className="font-semibold text-charcoal dark:text-white mb-3 text-lg">Reasons for Testing:</h4>
                      <div className="flex flex-wrap gap-3">
                        {selectedReasons.map((reasonId) => {
                          const reason = testReasons.find((r) => r.id === reasonId)
                          return (
                            <Badge key={reasonId} variant="secondary" className="px-3 py-1 text-sm">
                              {reason?.label}
                            </Badge>
                          )
                        })}
                      </div>
                    </div>
                  )}

                  {selectedIndustry && (
                    <div>
                      <h4 className="font-semibold text-charcoal dark:text-white mb-3 text-lg">Industry:</h4>
                      <Badge className="bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 px-4 py-2 text-base">
                        {industries.find((i) => i.value === selectedIndustry)?.label}
                      </Badge>
                    </div>
                  )}

                  {selectedAPTs.length > 0 && (
                    <div>
                      <h4 className="font-semibold text-charcoal dark:text-white mb-3 text-lg">Selected Threat Actors:</h4>
                      <div className="flex flex-wrap gap-3">
                        {selectedAPTs.map((aptId) => {
                          const apt = showAllAPTs
                            ? allAPTs.find((a) => a.id === aptId)
                            : selectedIndustry === "financial" && showAllFinancial
                              ? allFinancialAPTs.find((a) => a.id === aptId)
                              : currentAPTs.find((a) => a.id === aptId)
                          return (
                            <Badge key={aptId} className="bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200 px-3 py-1 text-sm">
                              {apt?.name}
                            </Badge>
                          )
                        })}
                      </div>
                    </div>
                  )}

                  <div className="pt-6 border-t border-brandyellow/30">
                    <Button
                      type="submit"
                      size="lg"
                      disabled={isPending || optimisticSubmitting || !dataPrivacyConsent}
                      className="w-full bg-charcoal dark:bg-brandyellow hover:bg-charcoal/90 dark:hover:bg-brightyellow text-white dark:text-charcoal font-bold text-lg py-6 rounded-xl shadow-xl hover:shadow-2xl transform transition-all duration-200 hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      {isPending || optimisticSubmitting ? 'Submitting Request...' : 'Submit Penetration Test Request'}
                    </Button>

                    {state.message && (
                      <div className={cn(
                        "mt-6 p-4 rounded-xl",
                        state.success ? "bg-green-50 text-green-800 dark:bg-green-900/20 dark:text-green-200" : "bg-red-50 text-red-800 dark:bg-red-900/20 dark:text-red-200"
                      )}>
                        {state.message}
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            </ScrollAnimation>
          )}
        </form>
      </div>
    </div>
  )
}