"use client"

import type React from "react"
import { useState, useMemo, useCallback, useActionState, useOptimistic, Fragment } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Checkbox } from "@/components/ui/checkbox"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { CheckCircle, Shield, Building, Users, MapPin, DollarSign, Calendar, Mail, Phone, Target, Globe, Server, Cloud, Code, Smartphone, X } from "lucide-react"
import { Listbox, Transition, RadioGroup, Disclosure, Switch } from "@headlessui/react"
import { cn } from "@/lib/utils"
import ScrollAnimation from "../scroll-animation"
import { submitPentestForm } from "@/lib/actions"

const industries = [
 { value: "financial", label: "Financial Services", icon: DollarSign },
 { value: "government", label: "Government", icon: Building },
 { value: "healthcare", label: "Healthcare", icon: Shield },
 { value: "technology", label: "Technology", icon: Code },
 { value: "retail", label: "Retail", icon: Users },
 { value: "other", label: "Other", icon: Globe }
]

const testingTypes = [
 {
 id: "web",
 name: "Web Application Testing",
 description: "Comprehensive security testing of web applications",
 icon: Globe,
 basePrice: 5000,
 gradient: "from-blue-500 to-cyan-500"
 },
 {
 id: "network",
 name: "Network Penetration Testing",
 description: "External and internal network security assessments",
 icon: Server,
 basePrice: 8000,
 gradient: "from-purple-500 to-indigo-500"
 },
 {
 id: "cloud",
 name: "Cloud Security Assessment",
 description: "AWS, Azure, GCP configuration and security review",
 icon: Cloud,
 basePrice: 7000,
 gradient: "from-emerald-500 to-teal-500"
 },
 {
 id: "mobile",
 name: "Mobile Application Testing",
 description: "iOS and Android application security testing",
 icon: Smartphone,
 basePrice: 6000,
 gradient: "from-orange-500 to-red-500"
 },
 {
 id: "api",
 name: "API Security Testing",
 description: "REST API and GraphQL endpoint security assessment",
 icon: Code,
 basePrice: 4000,
 gradient: "from-pink-500 to-rose-500"
 }
]

const addons = [
 { id: "threat-intel", name: "Threat Intelligence Integration", price: 2000 },
 { id: "red-team", name: "Red Team Exercise", price: 15000 },
 { id: "social-engineering", name: "Social Engineering Testing", price: 3000 },
 { id: "compliance", name: "Compliance Reporting (PCI/HIPAA)", price: 2500 }
]

const industryAPTs = {
 financial: [
 { id: "lazarus", name: "Lazarus Group (APT38)", description: "North Korean group targeting financial institutions" },
 { id: "carbanak", name: "Carbanak/FIN7", description: "Financially motivated group targeting payment systems" },
 { id: "cobalt", name: "Cobalt Group", description: "Cybercriminal group specializing in ATM attacks" },
 ],
 government: [
 { id: "cozy_bear", name: "Cozy Bear (APT29)", description: "Russian foreign intelligence service" },
 { id: "fancy_bear", name: "Fancy Bear (APT28)", description: "Russian military intelligence group" },
 { id: "comment_crew", name: "Comment Crew (APT1)", description: "Chinese state-sponsored group" },
 ],
 healthcare: [
 { id: "darkhydrus", name: "DarkHydrus", description: "Middle Eastern group targeting healthcare" },
 { id: "orangeworm", name: "Orangeworm", description: "Healthcare and related supply chain attacks" },
 { id: "kwampirs", name: "Kwampirs", description: "Healthcare and energy sector targeting group" },
 ],
 technology: [
 { id: "equation", name: "Equation Group", description: "Advanced persistent threat group" },
 { id: "apt33", name: "APT33 (Elfin)", description: "Iranian group targeting technology sector" },
 { id: "cloudhopper", name: "Cloud Hopper (APT10)", description: "Chinese MSP and cloud targeting" },
 ],
 retail: [
 { id: "fin6", name: "FIN6", description: "Point-of-sale and payment card data theft" },
 { id: "magecart", name: "Magecart", description: "E-commerce and payment card skimming" },
 { id: "silent_librarian", name: "Silent Librarian", description: "Phishing and credential harvesting" },
 ],
 other: [
 { id: "apt1", name: "APT1", description: "Chinese cyber espionage group" },
 { id: "apt28", name: "APT28", description: "Russian state-sponsored group" },
 { id: "apt29", name: "APT29", description: "Russian foreign intelligence" },
 ],
}

export default function HeadlessBuildPentestForm() {
 const [formData, setFormData] = useState({
 companyName: "",
 industry: "",
 testingType: [] as string[],
 addons: [] as string[],
 aptGroups: [] as string[],
 contactName: "",
 contactEmail: "",
 contactPhone: "",
 additionalInfo: "",
 urgentTesting: false,
 })

 const [selectedIndustry, setSelectedIndustry] = useState(industries[0])
 const [selectedTestingTypes, setSelectedTestingTypes] = useState<typeof testingTypes[0][]>([])
 const [selectedAddons, setSelectedAddons] = useState<string[]>([])
 const [selectedAPTs, setSelectedAPTs] = useState<string[]>([])
 const [urgentTesting, setUrgentTesting] = useState(false)

 const [optimisticMessage, addOptimisticMessage] = useOptimistic<
 { message: string; type: "success" | "error" } | null,
 { message: string; type: "success" | "error" }
 >(null, (state, newMessage) => newMessage)

 const [state, formAction, isPending] = useActionState(
 async (prevState: any, formData: FormData) => {
 addOptimisticMessage({ message: "Submitting your pentest request...", type: "success" })
 try {
 const result = await submitPentestForm(prevState, formData)
 if (result.success) {
 addOptimisticMessage({ message: result.message || "Success!", type: "success" })
 // Reset form
 setSelectedTestingTypes([])
 setSelectedAddons([])
 setSelectedAPTs([])
 setFormData({
 companyName: "",
 industry: "",
 testingType: [],
 addons: [],
 aptGroups: [],
 contactName: "",
 contactEmail: "",
 contactPhone: "",
 additionalInfo: "",
 urgentTesting: false,
 })
 } else {
 addOptimisticMessage({ message: result.message || "Error occurred", type: "error" })
 }
 return result
 } catch (error) {
 const errorMessage = error instanceof Error ? error.message : "An unexpected error occurred"
 addOptimisticMessage({ message: errorMessage, type: "error" })
 return { success: false, message: errorMessage }
 }
 },
 { success: false, message: "" },
 )

 const estimatedCost = useMemo(() => {
 const baseTestingCost = selectedTestingTypes.reduce((sum, test) => sum + test.basePrice, 0)
 const addonsCost = selectedAddons.reduce((sum, addonId) => {
 const addon = addons.find(a => a.id === addonId)
 return sum + (addon?.price || 0)
 }, 0)
 const urgentMultiplier = urgentTesting ? 1.5 : 1
 const aptMultiplier = selectedAPTs.length > 0 ? 1.2 : 1
 return Math.round((baseTestingCost + addonsCost) * urgentMultiplier * aptMultiplier)
 }, [selectedTestingTypes, selectedAddons, urgentTesting, selectedAPTs])

 const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
 e.preventDefault()
 const formDataToSubmit = new FormData(e.currentTarget)
 
 // Add array fields
 selectedTestingTypes.forEach(test => formDataToSubmit.append("testingType", test.id))
 selectedAddons.forEach(addon => formDataToSubmit.append("addons", addon))
 selectedAPTs.forEach(apt => formDataToSubmit.append("aptGroups", apt))
 formDataToSubmit.set("urgentTesting", urgentTesting.toString())
 formDataToSubmit.set("industry", selectedIndustry.value)
 formDataToSubmit.set("estimatedCost", estimatedCost.toString())
 
 formAction(formDataToSubmit)
 }

 return (
 <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-50 via-charcoal/95 to-charcoal">
 <div className="container py-12">
 <ScrollAnimation animation="fade">
 <div className="text-center mb-12">
 <h1 className="text-4xl md:text-5xl font-bold text-charcoal mb-4">
 Build Your Custom Pentest
 </h1>
 <p className="text-xl text-charcoal/70 max-w-3xl mx-auto">
 Configure a penetration test tailored to your organization's specific needs and threat landscape
 </p>
 </div>
 </ScrollAnimation>

 <form onSubmit={handleSubmit} className="max-w-4xl mx-auto space-y-8">
 {/* Company Information */}
 <ScrollAnimation animation="slide-up">
 <Card className="shadow-xl border-0 overflow-hidden">
 <CardHeader className="bg-gradient-to-r from-brandyellow/10 to-brandyellow/5 border-b border-brandyellow/20">
 <CardTitle className="flex items-center text-2xl">
 <Building className="w-6 h-6 mr-2 text-brandyellow" />
 Company Information
 </CardTitle>
 </CardHeader>
 <CardContent className="pt-6 space-y-6">
 <div>
 <Label htmlFor="companyName" className="text-base font-semibold mb-2 block">
 Company Name *
 </Label>
 <Input
 id="companyName"
 name="companyName"
 value={formData.companyName}
 onChange={(e) => setFormData({ ...formData, companyName: e.target.value })}
 className="text-base h-12"
 placeholder="Enter your company name"
 required
 />
 </div>

 <div>
 <Label className="text-base font-semibold mb-2 block">
 Industry *
 </Label>
 <Listbox value={selectedIndustry} onChange={setSelectedIndustry}>
 <div className="relative">
 <Listbox.Button className="relative w-full cursor-pointer rounded-lg bg-white py-3 pl-4 pr-10 text-left shadow-md focus:outline-none focus-visible:border-brandyellow focus-visible:ring-2 focus-visible:ring-brandyellow/75 focus-visible:ring-offset-2 focus-visible:ring-offset-brandyellow/25 sm:text-sm border border-gray-200 transition-all duration-200 hover:border-brandyellow/50">
 <span className="flex items-center">
 <selectedIndustry.icon className="w-5 h-5 mr-3 text-brandyellow" />
 <span className="block truncate">{selectedIndustry.label}</span>
 </span>
 <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
 <svg className="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
 <path fillRule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clipRule="evenodd" />
 </svg>
 </span>
 </Listbox.Button>
 <Transition
 as={Fragment}
 leave="transition ease-in duration-100"
 leaveFrom="opacity-100"
 leaveTo="opacity-0"
 >
 <Listbox.Options className="absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm">
 {industries.map((industry) => (
 <Listbox.Option
 key={industry.value}
 className={({ active }) =>
 cn(
 "relative cursor-pointer select-none py-3 pl-10 pr-4 transition-colors duration-150",
 active ? "bg-brandyellow/10 text-charcoal " : "text-gray-900 "
 )
 }
 value={industry}
 >
 {({ selected }) => (
 <>
 <span className={cn("flex items-center", selected ? "font-medium" : "font-normal")}>
 <industry.icon className="w-5 h-5 mr-3 text-brandyellow" />
 {industry.label}
 </span>
 {selected ? (
 <span className="absolute inset-y-0 left-0 flex items-center pl-3 text-brandyellow">
 <CheckCircle className="h-5 w-5" />
 </span>
 ) : null}
 </>
 )}
 </Listbox.Option>
 ))}
 </Listbox.Options>
 </Transition>
 </div>
 </Listbox>
 </div>
 </CardContent>
 </Card>
 </ScrollAnimation>

 {/* Testing Types */}
 <ScrollAnimation animation="slide-up" delay={0.1}>
 <Card className="shadow-xl border-0 overflow-hidden">
 <CardHeader className="bg-gradient-to-r from-blue-500/10 to-cyan-500/10 border-b border-blue-500/20">
 <CardTitle className="flex items-center text-2xl">
 <Shield className="w-6 h-6 mr-2 text-blue-500" />
 Testing Types
 </CardTitle>
 </CardHeader>
 <CardContent className="pt-6">
 <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
 {testingTypes.map((type) => (
 <div
 key={type.id}
 className={cn(
 "relative rounded-lg border-2 p-4 cursor-pointer transition-all duration-200",
 selectedTestingTypes.includes(type)
 ? "border-brandyellow bg-brandyellow/5 shadow-lg transform scale-[1.02]"
 : "border-gray-200 hover:border-brandyellow/50"
 )}
 onClick={() => {
 setSelectedTestingTypes(prev =>
 prev.includes(type)
 ? prev.filter(t => t !== type)
 : [...prev, type]
 )
 }}
 >
 <div className="flex items-start space-x-3">
 <div className={cn(
 "w-10 h-10 rounded-lg flex items-center justify-center transition-all duration-200",
 selectedTestingTypes.includes(type)
 ? "bg-gradient-to-r " + type.gradient + " shadow-lg transform scale-110"
 : "bg-gray-100 "
 )}>
 <type.icon className="w-5 h-5 text-white" />
 </div>
 <div className="flex-1">
 <h3 className="font-semibold text-charcoal ">{type.name}</h3>
 <p className="text-sm text-charcoal/70 mt-1">{type.description}</p>
 <p className="text-sm font-medium text-brandyellow mt-2">
 Base price: £{type.basePrice.toLocaleString()}
 </p>
 </div>
 <div className={cn(
 "w-6 h-6 rounded-full border-2 flex items-center justify-center transition-all duration-200",
 selectedTestingTypes.includes(type)
 ? "border-brandyellow bg-brandyellow"
 : "border-gray-300 "
 )}>
 {selectedTestingTypes.includes(type) && (
 <CheckCircle className="w-4 h-4 text-white" />
 )}
 </div>
 </div>
 </div>
 ))}
 </div>
 </CardContent>
 </Card>
 </ScrollAnimation>

 {/* Threat Intelligence */}
 {selectedIndustry.value !== "other" && (
 <ScrollAnimation animation="slide-up" delay={0.2}>
 <Card className="shadow-xl border-0 overflow-hidden">
 <CardHeader className="bg-gradient-to-r from-red-500/10 to-orange-500/10 border-b border-red-500/20">
 <CardTitle className="flex items-center text-2xl">
 <Target className="w-6 h-6 mr-2 text-red-500" />
 Industry-Specific Threat Groups
 </CardTitle>
 </CardHeader>
 <CardContent className="pt-6">
 <p className="text-charcoal/70 mb-4">
 Select threat groups to simulate in your testing based on your industry profile:
 </p>
 <div className="space-y-3">
 {industryAPTs[selectedIndustry.value as keyof typeof industryAPTs]?.map((apt) => (
 <Disclosure key={apt.id}>
 {({ open }) => (
 <div className={cn(
 "rounded-lg border transition-all duration-200",
 selectedAPTs.includes(apt.id)
 ? "border-brandyellow bg-brandyellow/5"
 : "border-gray-200 "
 )}>
 <Disclosure.Button className="flex w-full items-center justify-between px-4 py-3 text-left">
 <div className="flex items-center space-x-3">
 <div className={cn(
 "w-5 h-5 rounded border-2 flex items-center justify-center transition-all duration-200",
 selectedAPTs.includes(apt.id)
 ? "border-brandyellow bg-brandyellow"
 : "border-gray-300 "
 )}
 onClick={(e) => {
 e.stopPropagation()
 setSelectedAPTs(prev =>
 prev.includes(apt.id)
 ? prev.filter(id => id !== apt.id)
 : [...prev, apt.id]
 )
 }}>
 {selectedAPTs.includes(apt.id) && (
 <CheckCircle className="w-3 h-3 text-white" />
 )}
 </div>
 <span className="font-medium text-charcoal ">{apt.name}</span>
 </div>
 <svg
 className={cn(
 "h-5 w-5 text-gray-500 transition-transform duration-200",
 open ? "rotate-180" : ""
 )}
 fill="currentColor"
 viewBox="0 0 20 20"
 >
 <path fillRule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clipRule="evenodd" />
 </svg>
 </Disclosure.Button>
 <Transition
 enter="transition duration-100 ease-out"
 enterFrom="transform scale-95 opacity-0"
 enterTo="transform scale-100 opacity-100"
 leave="transition duration-75 ease-out"
 leaveFrom="transform scale-100 opacity-100"
 leaveTo="transform scale-95 opacity-0"
 >
 <Disclosure.Panel className="px-4 pb-3 text-sm text-charcoal/70 ">
 {apt.description}
 </Disclosure.Panel>
 </Transition>
 </div>
 )}
 </Disclosure>
 ))}
 </div>
 </CardContent>
 </Card>
 </ScrollAnimation>
 )}

 {/* Add-ons */}
 <ScrollAnimation animation="slide-up" delay={0.3}>
 <Card className="shadow-xl border-0 overflow-hidden">
 <CardHeader className="bg-gradient-to-r from-purple-500/10 to-indigo-500/10 border-b border-purple-500/20">
 <CardTitle className="flex items-center text-2xl">
 <Users className="w-6 h-6 mr-2 text-purple-500" />
 Additional Services
 </CardTitle>
 </CardHeader>
 <CardContent className="pt-6">
 <div className="space-y-3">
 {addons.map((addon) => (
 <label
 key={addon.id}
 className={cn(
 "flex items-center justify-between p-4 rounded-lg border-2 cursor-pointer transition-all duration-200",
 selectedAddons.includes(addon.id)
 ? "border-brandyellow bg-brandyellow/5"
 : "border-gray-200 hover:border-brandyellow/50"
 )}
 >
 <div className="flex items-center space-x-3">
 <Checkbox
 checked={selectedAddons.includes(addon.id)}
 onCheckedChange={(checked) => {
 setSelectedAddons(prev =>
 checked
 ? [...prev, addon.id]
 : prev.filter(id => id !== addon.id)
 )
 }}
 className="border-2"
 />
 <span className="font-medium text-charcoal ">{addon.name}</span>
 </div>
 <span className="text-brandyellow font-semibold">
 +£{addon.price.toLocaleString()}
 </span>
 </label>
 ))}
 </div>

 <div className="mt-6 p-4 bg-red-50 rounded-lg border border-red-200 ">
 <div className="flex items-center justify-between">
 <div className="flex items-center space-x-3">
 <Calendar className="w-5 h-5 text-red-500" />
 <div>
 <p className="font-semibold text-charcoal ">Urgent Testing Required?</p>
 <p className="text-sm text-charcoal/70 ">50% rush fee for testing within 48 hours</p>
 </div>
 </div>
 <Switch
 checked={urgentTesting}
 onChange={setUrgentTesting}
 className={cn(
 "relative inline-flex h-6 w-11 items-center rounded-full transition-colors duration-200",
 urgentTesting ? "bg-red-500" : "bg-gray-200 "
 )}
 >
 <span
 className={cn(
 "inline-block h-4 w-4 transform rounded-full bg-white transition-transform duration-200",
 urgentTesting ? "translate-x-6" : "translate-x-1"
 )}
 />
 </Switch>
 </div>
 </div>
 </CardContent>
 </Card>
 </ScrollAnimation>

 {/* Contact Information */}
 <ScrollAnimation animation="slide-up" delay={0.4}>
 <Card className="shadow-xl border-0 overflow-hidden">
 <CardHeader className="bg-gradient-to-r from-green-500/10 to-emerald-500/10 border-b border-green-500/20">
 <CardTitle className="flex items-center text-2xl">
 <Mail className="w-6 h-6 mr-2 text-green-500" />
 Contact Information
 </CardTitle>
 </CardHeader>
 <CardContent className="pt-6 space-y-6">
 <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
 <div>
 <Label htmlFor="contactName" className="text-base font-semibold mb-2 block">
 Contact Name *
 </Label>
 <Input
 id="contactName"
 name="contactName"
 value={formData.contactName}
 onChange={(e) => setFormData({ ...formData, contactName: e.target.value })}
 className="text-base h-12"
 placeholder="Your full name"
 required
 />
 </div>
 <div>
 <Label htmlFor="contactPhone" className="text-base font-semibold mb-2 block">
 Phone Number
 </Label>
 <Input
 id="contactPhone"
 name="contactPhone"
 type="tel"
 value={formData.contactPhone}
 onChange={(e) => setFormData({ ...formData, contactPhone: e.target.value })}
 className="text-base h-12"
 placeholder="+44 (0) 1234 567890"
 />
 </div>
 </div>
 <div>
 <Label htmlFor="contactEmail" className="text-base font-semibold mb-2 block">
 Email Address *
 </Label>
 <Input
 id="contactEmail"
 name="contactEmail"
 type="email"
 value={formData.contactEmail}
 onChange={(e) => setFormData({ ...formData, contactEmail: e.target.value })}
 className="text-base h-12"
 placeholder="your.email@company.com"
 required
 />
 </div>
 <div>
 <Label htmlFor="additionalInfo" className="text-base font-semibold mb-2 block">
 Additional Information
 </Label>
 <Textarea
 id="additionalInfo"
 name="additionalInfo"
 value={formData.additionalInfo}
 onChange={(e) => setFormData({ ...formData, additionalInfo: e.target.value })}
 className="text-base min-h-[120px]"
 placeholder="Any specific requirements, compliance needs, or timeline constraints..."
 />
 </div>
 </CardContent>
 </Card>
 </ScrollAnimation>

 {/* Cost Estimate */}
 <ScrollAnimation animation="slide-up" delay={0.5}>
 <Card className="shadow-xl border-0 overflow-hidden bg-gradient-to-r from-brandyellow/5 to-brandyellow/10">
 <CardContent className="p-8">
 <div className="flex items-center justify-between">
 <div>
 <h3 className="text-2xl font-bold text-charcoal mb-2">
 Estimated Investment
 </h3>
 <p className="text-charcoal/70 ">
 Based on your selected services and requirements
 </p>
 </div>
 <div className="text-right">
 <p className="text-4xl font-bold text-brandyellow">
 £{estimatedCost.toLocaleString()}
 </p>
 <p className="text-sm text-charcoal/60 mt-1">
 {urgentTesting && "(Includes 50% rush fee)"}
 </p>
 </div>
 </div>

 {selectedTestingTypes.length > 0 && (
 <div className="mt-6 space-y-2 pt-6 border-t border-brandyellow/20">
 <p className="font-semibold text-charcoal mb-3">Selected Services:</p>
 {selectedTestingTypes.map(type => (
 <div key={type.id} className="flex items-center justify-between text-sm">
 <span className="text-charcoal/70 ">{type.name}</span>
 <span className="text-charcoal ">£{type.basePrice.toLocaleString()}</span>
 </div>
 ))}
 {selectedAddons.map(addonId => {
 const addon = addons.find(a => a.id === addonId)
 return addon ? (
 <div key={addon.id} className="flex items-center justify-between text-sm">
 <span className="text-charcoal/70 ">{addon.name}</span>
 <span className="text-charcoal ">£{addon.price.toLocaleString()}</span>
 </div>
 ) : null
 })}
 </div>
 )}
 </CardContent>
 </Card>
 </ScrollAnimation>

 {/* Submit Button */}
 <div className="flex flex-col items-center space-y-4">
 <Button
 type="submit"
 size="lg"
 disabled={isPending || selectedTestingTypes.length === 0}
 className="w-full md:w-auto bg-brandyellow hover:bg-brightyellow text-charcoal font-bold text-lg px-12 py-6 rounded-lg shadow-xl hover:shadow-2xl transform transition-all duration-200 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed"
 >
 {isPending ? (
 <span className="flex items-center">
 <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-charcoal" fill="none" viewBox="0 0 24 24">
 <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />
 <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
 </svg>
 Submitting Request...
 </span>
 ) : (
 "Get Your Custom Quote"
 )}
 </Button>
 
 {optimisticMessage && (
 <Transition
 show={true}
 enter="transition-opacity duration-300"
 enterFrom="opacity-0"
 enterTo="opacity-100"
 leave="transition-opacity duration-300"
 leaveFrom="opacity-100"
 leaveTo="opacity-0"
 >
 <div className={cn(
 "p-4 rounded-lg flex items-center space-x-2",
 optimisticMessage.type === "success"
 ? "bg-green-50 text-green-800 "
 : "bg-red-50 text-red-800 "
 )}>
 {optimisticMessage.type === "success" ? (
 <CheckCircle className="w-5 h-5" />
 ) : (
 <X className="w-5 h-5" />
 )}
 <span>{optimisticMessage.message}</span>
 </div>
 </Transition>
 )}
 </div>
 </form>
 </div>
 </div>
 )
}