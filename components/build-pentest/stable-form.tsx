"use client"

import type React from "react"
import { useState, useMemo } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Checkbox } from "@/components/ui/checkbox"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { CheckCircle, Shield, Building, Users, MapPin, DollarSign, Calendar, Mail, Phone, ChevronDown } from "lucide-react"
import { Listbox, Transition, Disclosure } from "@headlessui/react"
import { cn } from "@/lib/utils"
import ScrollAnimation from "../scroll-animation"
import { submitPentestForm } from "@/lib/actions"

// All the original data structures
const industryAPTs = {
  financial: [
    {
      id: "lazarus",
      name: "Lazarus Group (APT38)",
      description: "North Korean group targeting financial institutions and SWIFT networks",
    },
    {
      id: "carbanak",
      name: "Carbanak/FIN7",
      description: "Financially motivated group targeting payment systems and banks",
    },
    {
      id: "cobalt",
      name: "Cobalt Group",
      description: "Cybercriminal group specializing in ATM and payment card attacks",
    },
    { id: "fin6", name: "FIN6", description: "Financial threat group targeting point-of-sale systems" },
  ],
  government: [
    {
      id: "cozy_bear",
      name: "Cozy Bear (APT29)",
      description: "Russian foreign intelligence service targeting government agencies",
    },
    {
      id: "fancy_bear",
      name: "Fancy Bear (APT28)",
      description: "Russian military intelligence group targeting defense and government",
    },
    {
      id: "comment_crew",
      name: "Comment Crew (APT1)",
      description: "Chinese group conducting cyber espionage against government targets",
    },
    { id: "turla", name: "Turla (APT29)", description: "Russian group targeting government and diplomatic entities" },
    {
      id: "kimsuky",
      name: "Kimsuky (APT43)",
      description: "North Korean group targeting government and defense organizations",
    },
  ],
  energy: [
    {
      id: "sandworm",
      name: "Sandworm (APT44)",
      description: "Russian group targeting critical infrastructure and energy facilities",
    },
    {
      id: "oilrig",
      name: "OilRig/Quilin (APT34)",
      description: "Iranian group targeting energy and government sectors",
    },
    { id: "elfin", name: "Elfin (APT33)", description: "Iranian group focusing on aviation and energy companies" },
  ],
  technology: [
    {
      id: "winnti",
      name: "Winnti Group (APT41)",
      description: "Chinese group targeting technology companies and software supply chains",
    },
    {
      id: "stone_panda",
      name: "Stone Panda (APT10)",
      description: "Chinese group targeting technology and intellectual property",
    },
    {
      id: "deep_panda",
      name: "Deep Panda (APT19)",
      description: "Chinese group targeting technology and healthcare sectors",
    },
  ],
  telecommunications: [
    { id: "apt10", name: "APT10", description: "Chinese group targeting telecommunications infrastructure" },
    {
      id: "mustang_panda",
      name: "Mustang Panda (APT27)",
      description: "Chinese group targeting telecommunications and government",
    },
    { id: "reaper", name: "Reaper (APT37)", description: "North Korean group targeting telecommunications and media" },
  ],
  healthcare: [
    {
      id: "winnti_apt41",
      name: "Winnti/APT41",
      description: "Chinese group targeting healthcare data and pharmaceutical research",
    },
    {
      id: "wizard_spider",
      name: "Wizard Spider",
      description: "Ransomware group frequently targeting healthcare institutions",
    },
  ],
  aerospace: [
    {
      id: "emissary_panda",
      name: "Emissary Panda (APT27)",
      description: "Chinese group targeting aerospace and defense contractors",
    },
  ],
  maritime: [
    {
      id: "leviathan",
      name: "Leviathan (APT40)",
      description: "Chinese group targeting maritime industries and shipping companies",
    },
  ],
  education: [
    {
      id: "charming_kitten",
      name: "Charming Kitten (APT35)",
      description: "Iranian group targeting academic institutions and researchers",
    },
    {
      id: "ocean_lotus",
      name: "Ocean Lotus (APT32)",
      description: "Vietnamese group targeting academic and research organizations",
    },
  ],
  infrastructure: [
    {
      id: "sandworm_infra",
      name: "Sandworm (APT44)",
      description: "Russian group targeting critical national infrastructure",
    },
    {
      id: "equation_group",
      name: "Equation Group",
      description: "Advanced group targeting critical infrastructure worldwide",
    },
  ],
  retail: [
    { id: "fin7_retail", name: "FIN7", description: "Point-of-sale malware and payment card theft in retail" },
    { id: "carbanak_retail", name: "Carbanak", description: "Retail payment system attacks and e-commerce fraud" },
  ],
  manufacturing: [
    { id: "winnti_mfg", name: "Winnti Group", description: "Industrial espionage and intellectual property theft" },
    { id: "apt1_mfg", name: "APT1", description: "Chinese group targeting manufacturing and industrial secrets" },
  ],
  legal: [
    { id: "apt1_legal", name: "APT1", description: "Legal document and client data theft" },
    { id: "apt28_legal", name: "APT28", description: "Law firm espionage operations" },
  ],
  other: [
    { id: "apt1_general", name: "APT1", description: "General corporate espionage across industries" },
    { id: "apt28_general", name: "APT28", description: "Multi-industry targeting and espionage" },
    { id: "apt29_general", name: "APT29", description: "Broad spectrum intelligence gathering" },
  ],
}

const allAPTs = [
  // All APT groups for "Show All" functionality
  {
    id: "lazarus",
    name: "Lazarus Group (APT38)",
    description: "North Korean group targeting financial institutions and SWIFT networks",
    industry: "Financial Services",
  },
  {
    id: "carbanak",
    name: "Carbanak/FIN7",
    description: "Financially motivated group targeting payment systems and banks",
    industry: "Financial Services",
  },
  {
    id: "cozy_bear",
    name: "Cozy Bear (APT29)",
    description: "Russian foreign intelligence service targeting government agencies",
    industry: "Government/Defense",
  },
  // Add all other APTs...
]

const industries = [
  { value: "financial", label: "Financial Services" },
  { value: "government", label: "Government/Defense" },
  { value: "energy", label: "Energy/Utilities" },
  { value: "technology", label: "Technology/IT" },
  { value: "telecommunications", label: "Telecommunications" },
  { value: "healthcare", label: "Healthcare/Pharmaceutical" },
  { value: "aerospace", label: "Aerospace/Defense Contractors" },
  { value: "maritime", label: "Maritime/Shipping" },
  { value: "education", label: "Academic/Research" },
  { value: "infrastructure", label: "Critical National Infrastructure" },
  { value: "retail", label: "Retail & E-commerce" },
  { value: "manufacturing", label: "Manufacturing" },
  { value: "legal", label: "Legal Services" },
  { value: "other", label: "Other" },
]

const testReasons = [
  {
    id: "compliance",
    label: "Compliance Requirements",
    description: "Meeting regulatory or compliance standards like PCI DSS, HIPAA, or SOC 2.",
  },
  {
    id: "due-diligence",
    label: "Due Diligence / Investment",
    description: "Security assessment for investors, acquisitions, or business partnerships.",
  },
  {
    id: "annual-testing",
    label: "Annual Security Testing",
    description: "Regular security posture evaluation and vulnerability assessment.",
  },
  {
    id: "incident-response",
    label: "Post-Incident Assessment",
    description: "Security review following a breach or security incident.",
  },
  {
    id: "new-infrastructure",
    label: "New Infrastructure/Application",
    description: "Testing newly deployed systems or applications before go-live.",
  },
  {
    id: "third-party",
    label: "Third-Party Requirement",
    description: "Client or partner requiring proof of security testing.",
  },
  {
    id: "risk-assessment",
    label: "Risk Management",
    description: "Proactive identification and mitigation of security risks.",
  },
  {
    id: "ma",
    label: "Mergers & Acquisitions",
    description: "Performing security due diligence for M&A activities.",
  },
  { id: "other", label: "Other", description: "Other reasons not listed." },
]

export default function StableForm() {
  const [serviceType, setServiceType] = useState<string>("")
  const [selectedReasons, setSelectedReasons] = useState<string[]>([])
  const [selectedIndustry, setSelectedIndustry] = useState<string>("")
  const [selectedAPTs, setSelectedAPTs] = useState<string[]>([])
  const [showAllAPTs, setShowAllAPTs] = useState(false)
  const [dataPrivacyConsent, setDataPrivacyConsent] = useState(false)
  const [marketingConsent, setMarketingConsent] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [submitMessage, setSubmitMessage] = useState<{ type: 'success' | 'error', message: string } | null>(null)

  const [formData, setFormData] = useState({
    employees: "",
    locations: "",
    budget: "",
    timeline: "",
    firstName: "",
    lastName: "",
    email: "",
    phone: "",
    company: "",
    message: "",
  })

  const currentAPTs = useMemo(() => {
    if (showAllAPTs) return allAPTs
    if (!selectedIndustry) return []
    return industryAPTs[selectedIndustry as keyof typeof industryAPTs] || []
  }, [selectedIndustry, showAllAPTs])

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    setIsSubmitting(true)
    setSubmitMessage(null)

    if (!serviceType) {
      setSubmitMessage({ type: 'error', message: 'Please select a service type.' })
      setIsSubmitting(false)
      return
    }

    const formDataToSubmit = new FormData(e.currentTarget)
    formDataToSubmit.set("serviceType", serviceType)
    formDataToSubmit.set("selectedReasons", JSON.stringify(selectedReasons))
    formDataToSubmit.set("selectedIndustry", selectedIndustry)
    formDataToSubmit.set("selectedAPTs", JSON.stringify(selectedAPTs))
    formDataToSubmit.set("dataPrivacyConsent", dataPrivacyConsent.toString())
    formDataToSubmit.set("marketingConsent", marketingConsent.toString())

    try {
      const result = await submitPentestForm({}, formDataToSubmit)
      if (result.success) {
        setSubmitMessage({ type: 'success', message: result.message || 'Form submitted successfully!' })
        // Reset form
        setServiceType("")
        setSelectedReasons([])
        setSelectedIndustry("")
        setSelectedAPTs([])
        setFormData({
          employees: "",
          locations: "",
          budget: "",
          timeline: "",
          firstName: "",
          lastName: "",
          email: "",
          phone: "",
          company: "",
          message: "",
        })
        setDataPrivacyConsent(false)
        setMarketingConsent(false)
      } else {
        setSubmitMessage({ type: 'error', message: result.message || 'An error occurred' })
      }
    } catch (error) {
      setSubmitMessage({ type: 'error', message: 'An error occurred while submitting your request.' })
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <section className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-50 dark:from-charcoal via-charcoal/95 to-charcoal">
      <div className="container py-12 max-w-4xl">
        <ScrollAnimation animation="fade">
          <div className="text-center mb-16">
            <h1 className="text-4xl md:text-6xl font-bold text-charcoal dark:text-white mb-6">
              Build a Penetration Test
            </h1>
            <p className="text-xl text-charcoal/70 dark:text-white/70 max-w-3xl mx-auto">
              Create a customized penetration testing proposal tailored to your organization's specific needs, industry,
              and threat landscape.
            </p>
          </div>
        </ScrollAnimation>

        <form onSubmit={handleSubmit} className="space-y-8">
          {/* Service Type Selection */}
          <ScrollAnimation animation="slide-up" delay={0.1}>
            <Card className="shadow-lg border-0 bg-white dark:bg-charcoal/80">
              <CardHeader>
                <CardTitle className="flex items-center text-charcoal dark:text-white">
                  <Shield className="w-6 h-6 mr-3 text-brandyellow" />
                  What type of service do you need?
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {/* Vulnerability Assessment */}
                  <div
                    className={cn(
                      "relative p-4 rounded-lg border-2 cursor-pointer transition-all",
                      serviceType === "vulnerability-assessment"
                        ? "border-brandyellow bg-brandyellow/5"
                        : "border-gray-200 dark:border-gray-700 hover:border-gray-300"
                    )}
                    onClick={() => setServiceType("vulnerability-assessment")}
                  >
                    <div className="flex items-start space-x-3">
                      <Checkbox
                        checked={serviceType === "vulnerability-assessment"}
                        onCheckedChange={(checked) => setServiceType(checked ? "vulnerability-assessment" : "")}
                        onClick={(e) => e.stopPropagation()}
                      />
                      <div className="flex-1">
                        <h4 className="font-semibold text-charcoal dark:text-white">Vulnerability Assessment</h4>
                        <p className="text-sm text-charcoal/70 dark:text-white/70 mt-1">
                          Automated scanning to identify known vulnerabilities and misconfigurations without exploitation.
                        </p>
                      </div>
                    </div>
                  </div>

                  {/* Penetration Test */}
                  <div
                    className={cn(
                      "relative p-4 rounded-lg border-2 cursor-pointer transition-all",
                      serviceType === "penetration-test"
                        ? "border-brandyellow bg-brandyellow/5"
                        : "border-gray-200 dark:border-gray-700 hover:border-gray-300"
                    )}
                    onClick={() => setServiceType("penetration-test")}
                  >
                    <div className="flex items-start space-x-3">
                      <Checkbox
                        checked={serviceType === "penetration-test"}
                        onCheckedChange={(checked) => setServiceType(checked ? "penetration-test" : "")}
                        onClick={(e) => e.stopPropagation()}
                      />
                      <div className="flex-1">
                        <h4 className="font-semibold text-charcoal dark:text-white">Penetration Test</h4>
                        <p className="text-sm text-charcoal/70 dark:text-white/70 mt-1">
                          Simulated cyber attacks to actively exploit vulnerabilities and demonstrate real-world impact to your systems and data.
                        </p>
                      </div>
                    </div>
                  </div>

                  {/* Threat-Led Pentest */}
                  <div
                    className={cn(
                      "relative p-4 rounded-lg border-2 cursor-pointer transition-all",
                      serviceType === "threat-led-pentest"
                        ? "border-brandyellow bg-brandyellow/5"
                        : "border-gray-200 dark:border-gray-700 hover:border-gray-300"
                    )}
                    onClick={() => setServiceType("threat-led-pentest")}
                  >
                    <div className="flex items-start space-x-3">
                      <Checkbox
                        checked={serviceType === "threat-led-pentest"}
                        onCheckedChange={(checked) => setServiceType(checked ? "threat-led-pentest" : "")}
                        onClick={(e) => e.stopPropagation()}
                      />
                      <div className="flex-1">
                        <h4 className="font-semibold text-charcoal dark:text-white">Threat-Led Penetration Test</h4>
                        <p className="text-sm text-charcoal/70 dark:text-white/70 mt-1">
                          Advanced testing simulating specific threat actors (APT groups) targeting your industry using their known tactics and techniques.
                        </p>
                      </div>
                    </div>
                  </div>

                  {/* Red Team */}
                  <div
                    className={cn(
                      "relative p-4 rounded-lg border-2 cursor-pointer transition-all",
                      serviceType === "red-team"
                        ? "border-brandyellow bg-brandyellow/5"
                        : "border-gray-200 dark:border-gray-700 hover:border-gray-300"
                    )}
                    onClick={() => setServiceType("red-team")}
                  >
                    <div className="flex items-start space-x-3">
                      <Checkbox
                        checked={serviceType === "red-team"}
                        onCheckedChange={(checked) => setServiceType(checked ? "red-team" : "")}
                        onClick={(e) => e.stopPropagation()}
                      />
                      <div className="flex-1">
                        <h4 className="font-semibold text-charcoal dark:text-white">Red Team</h4>
                        <p className="text-sm text-charcoal/70 dark:text-white/70 mt-1">
                          Full-scale adversarial simulation testing your organization's detection and response capabilities against sophisticated attacks.
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </ScrollAnimation>

          {/* Test Reasons - Only show for non-vulnerability assessment */}
          {serviceType && serviceType !== "vulnerability-assessment" && (
            <ScrollAnimation animation="slide-up" delay={0.2}>
              <Card className="shadow-lg border-0 bg-white dark:bg-charcoal/80">
                <CardHeader>
                  <CardTitle className="flex items-center text-charcoal dark:text-white">
                    <Shield className="w-6 h-6 mr-3 text-blue-500" />
                    Why do you need a penetration test?
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {testReasons.map((reason) => (
                      <div
                        key={reason.id}
                        className={cn(
                          "relative p-4 rounded-lg border-2 cursor-pointer transition-all",
                          selectedReasons.includes(reason.id)
                            ? "border-blue-500 bg-blue-50 dark:bg-blue-900/20"
                            : "border-gray-200 dark:border-gray-700 hover:border-gray-300"
                        )}
                        onClick={() => {
                          setSelectedReasons(prev =>
                            prev.includes(reason.id)
                              ? prev.filter(id => id !== reason.id)
                              : [...prev, reason.id]
                          )
                        }}
                      >
                        <div className="flex items-start space-x-3">
                          <Checkbox
                            checked={selectedReasons.includes(reason.id)}
                            onCheckedChange={(checked) => {
                              setSelectedReasons(prev =>
                                checked
                                  ? [...prev, reason.id]
                                  : prev.filter(id => id !== reason.id)
                              )
                            }}
                            onClick={(e) => e.stopPropagation()}
                          />
                          <div className="flex-1">
                            <h4 className="font-semibold text-charcoal dark:text-white">{reason.label}</h4>
                            <p className="text-sm text-charcoal/70 dark:text-white/70 mt-1">{reason.description}</p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </ScrollAnimation>
          )}

          {/* Industry Selection */}
          {serviceType && (
            <ScrollAnimation animation="slide-up" delay={0.3}>
              <Card className="shadow-lg border-0 bg-white dark:bg-charcoal/80">
                <CardHeader>
                  <CardTitle className="flex items-center text-charcoal dark:text-white">
                    <Building className="w-6 h-6 mr-3 text-brandyellow" />
                    Select Your Industry
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <Listbox value={selectedIndustry} onChange={setSelectedIndustry}>
                    <div className="relative">
                      <Listbox.Button className="relative w-full cursor-pointer rounded-lg bg-white dark:bg-charcoal py-3 pl-4 pr-10 text-left shadow-md focus:outline-none focus-visible:border-brandyellow focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75 focus-visible:ring-offset-2 focus-visible:ring-offset-brandyellow sm:text-sm border border-gray-200 dark:border-gray-700">
                        <span className="block truncate">
                          {selectedIndustry
                            ? industries.find(i => i.value === selectedIndustry)?.label
                            : "Choose your industry"}
                        </span>
                        <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                          <ChevronDown className="h-5 w-5 text-gray-400" aria-hidden="true" />
                        </span>
                      </Listbox.Button>
                      <Transition
                        leave="transition ease-in duration-100"
                        leaveFrom="opacity-100"
                        leaveTo="opacity-0"
                      >
                        <Listbox.Options className="absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-md bg-white dark:bg-charcoal py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm">
                          {industries.map((industry) => (
                            <Listbox.Option
                              key={industry.value}
                              className={({ active }) =>
                                cn(
                                  "relative cursor-pointer select-none py-2 pl-10 pr-4",
                                  active ? "bg-amber-100 text-amber-900 dark:bg-amber-800 dark:text-amber-100" : "text-gray-900 dark:text-gray-100"
                                )
                              }
                              value={industry.value}
                            >
                              {({ selected }) => (
                                <>
                                  <span className={cn("block truncate", selected ? "font-medium" : "font-normal")}>
                                    {industry.label}
                                  </span>
                                  {selected ? (
                                    <span className="absolute inset-y-0 left-0 flex items-center pl-3 text-amber-600">
                                      <CheckCircle className="h-5 w-5" aria-hidden="true" />
                                    </span>
                                  ) : null}
                                </>
                              )}
                            </Listbox.Option>
                          ))}
                        </Listbox.Options>
                      </Transition>
                    </div>
                  </Listbox>
                </CardContent>
              </Card>
            </ScrollAnimation>
          )}

          {/* APT Selection - Only show for non-vulnerability assessment */}
          {serviceType && serviceType !== "vulnerability-assessment" && selectedIndustry && currentAPTs.length > 0 && (
            <ScrollAnimation animation="slide-up" delay={0.4}>
              <Card className="shadow-lg border-0 bg-white dark:bg-charcoal/80">
                <CardHeader>
                  <div className="flex items-center justify-between flex-wrap gap-2">
                    <CardTitle className="flex items-center text-charcoal dark:text-white">
                      <Shield className="w-6 h-6 mr-3 text-red-500" />
                      {showAllAPTs ? "All Threat Actors" : "Industry-Specific Threat Actors"}
                    </CardTitle>
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={() => setShowAllAPTs(!showAllAPTs)}
                      className="text-sm"
                    >
                      {showAllAPTs ? "Show Industry Specific" : "See All APTs"}
                    </Button>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {currentAPTs.map((apt) => (
                      <Disclosure key={apt.id}>
                        {({ open }) => (
                          <div className="border border-gray-200 dark:border-gray-700 rounded-lg">
                            <Disclosure.Button className="flex w-full items-center justify-between px-4 py-3 text-left">
                              <div className="flex items-center space-x-3">
                                <Checkbox
                                  checked={selectedAPTs.includes(apt.id)}
                                  onCheckedChange={(checked) => {
                                    setSelectedAPTs(prev =>
                                      checked
                                        ? [...prev, apt.id]
                                        : prev.filter(id => id !== apt.id)
                                    )
                                  }}
                                  onClick={(e) => e.stopPropagation()}
                                />
                                <span className="font-medium text-charcoal dark:text-white">{apt.name}</span>
                              </div>
                              <ChevronDown
                                className={cn(
                                  "h-5 w-5 text-gray-500 transition-transform",
                                  open ? "rotate-180" : ""
                                )}
                              />
                            </Disclosure.Button>
                            <Transition
                              enter="transition duration-100 ease-out"
                              enterFrom="transform scale-95 opacity-0"
                              enterTo="transform scale-100 opacity-100"
                              leave="transition duration-75 ease-out"
                              leaveFrom="transform scale-100 opacity-100"
                              leaveTo="transform scale-95 opacity-0"
                            >
                              <Disclosure.Panel className="px-4 pb-3 text-sm text-charcoal/70 dark:text-white/70">
                                {apt.description}
                              </Disclosure.Panel>
                            </Transition>
                          </div>
                        )}
                      </Disclosure>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </ScrollAnimation>
          )}

          {/* Contact Information */}
          {serviceType && (
            <ScrollAnimation animation="slide-up" delay={0.5}>
              <Card className="shadow-lg border-0 bg-white dark:bg-charcoal/80">
                <CardHeader>
                  <CardTitle className="flex items-center text-charcoal dark:text-white">
                    <Users className="w-6 h-6 mr-3 text-brandyellow" />
                    Tell us about your organization
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <Label htmlFor="firstName">First Name *</Label>
                        <Input
                          id="firstName"
                          name="firstName"
                          value={formData.firstName}
                          onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}
                          required
                        />
                      </div>
                      <div>
                        <Label htmlFor="lastName">Last Name *</Label>
                        <Input
                          id="lastName"
                          name="lastName"
                          value={formData.lastName}
                          onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}
                          required
                        />
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <Label htmlFor="email">Email Address *</Label>
                        <Input
                          id="email"
                          name="email"
                          type="email"
                          value={formData.email}
                          onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                          required
                        />
                      </div>
                      <div>
                        <Label htmlFor="phone">Phone Number</Label>
                        <Input
                          id="phone"
                          name="phone"
                          type="tel"
                          value={formData.phone}
                          onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                        />
                      </div>
                    </div>

                    <div>
                      <Label htmlFor="company">Company Name *</Label>
                      <Input
                        id="company"
                        name="company"
                        value={formData.company}
                        onChange={(e) => setFormData({ ...formData, company: e.target.value })}
                        required
                      />
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <Label htmlFor="employees">Number of Employees</Label>
                        <Input
                          id="employees"
                          name="employees"
                          value={formData.employees}
                          onChange={(e) => setFormData({ ...formData, employees: e.target.value })}
                          placeholder="e.g., 100-500"
                        />
                      </div>
                      <div>
                        <Label htmlFor="locations">Number of Locations</Label>
                        <Input
                          id="locations"
                          name="locations"
                          value={formData.locations}
                          onChange={(e) => setFormData({ ...formData, locations: e.target.value })}
                          placeholder="e.g., 3"
                        />
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <Label htmlFor="budget">Estimated Budget</Label>
                        <Input
                          id="budget"
                          name="budget"
                          value={formData.budget}
                          onChange={(e) => setFormData({ ...formData, budget: e.target.value })}
                          placeholder="e.g., £10,000 - £20,000"
                        />
                      </div>
                      <div>
                        <Label htmlFor="timeline">Preferred Timeline</Label>
                        <Input
                          id="timeline"
                          name="timeline"
                          value={formData.timeline}
                          onChange={(e) => setFormData({ ...formData, timeline: e.target.value })}
                          placeholder="e.g., Within 30 days"
                        />
                      </div>
                    </div>

                    <div>
                      <Label htmlFor="message">Additional Information</Label>
                      <Textarea
                        id="message"
                        name="message"
                        value={formData.message}
                        onChange={(e) => setFormData({ ...formData, message: e.target.value })}
                        rows={4}
                        placeholder="Any specific requirements or additional details..."
                      />
                    </div>
                  </div>
                </CardContent>
              </Card>
            </ScrollAnimation>
          )}

          {/* Consent and Submit */}
          {serviceType && (
            <ScrollAnimation animation="slide-up" delay={0.6}>
              <Card className="shadow-lg border-0 bg-white dark:bg-charcoal/80">
                <CardContent className="pt-6">
                  <div className="space-y-4 mb-6">
                    <div className="flex items-start space-x-3">
                      <Checkbox
                        id="dataPrivacy"
                        checked={dataPrivacyConsent}
                        onCheckedChange={(checked) => setDataPrivacyConsent(checked === true)}
                      />
                      <label htmlFor="dataPrivacy" className="text-sm text-charcoal dark:text-white/90 cursor-pointer">
                        I consent to the processing of my personal data as outlined in the privacy policy. *
                      </label>
                    </div>
                    <div className="flex items-start space-x-3">
                      <Checkbox
                        id="marketing"
                        checked={marketingConsent}
                        onCheckedChange={(checked) => setMarketingConsent(checked === true)}
                      />
                      <label htmlFor="marketing" className="text-sm text-charcoal dark:text-white/90 cursor-pointer">
                        I would like to receive marketing communications about your services.
                      </label>
                    </div>
                  </div>

                  <div className="text-center">
                    <Button
                      type="submit"
                      size="lg"
                      disabled={isSubmitting || !dataPrivacyConsent}
                      className="bg-brandyellow hover:bg-brightyellow text-charcoal font-bold px-12 py-6 text-lg"
                    >
                      {isSubmitting ? "Submitting..." : "Request Custom Quote"}
                    </Button>

                    {submitMessage && (
                      <div className={cn(
                        "mt-4 p-4 rounded-lg",
                        submitMessage.type === "success" 
                          ? "bg-green-50 text-green-800 dark:bg-green-900/20 dark:text-green-200" 
                          : "bg-red-50 text-red-800 dark:bg-red-900/20 dark:text-red-200"
                      )}>
                        {submitMessage.message}
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            </ScrollAnimation>
          )}
        </form>
      </div>
    </section>
  )
}