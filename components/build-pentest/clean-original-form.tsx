"use client"

import type React from "react"
import { useState, useActionState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { Building, Shield, CheckCircle } from "lucide-react"
import { cn } from "@/lib/utils"
import ScrollAnimation from "../scroll-animation"
import { submitPentestForm } from "@/lib/actions"

// Original data structures exactly as they were
const industryAPTs = {
 financial: [
 {
 id: "lazarus",
 name: "Lazarus Group (APT38)",
 description: "North Korean group targeting financial institutions and SWIFT networks",
 },
 {
 id: "carbanak",
 name: "Carbanak/FIN7", 
 description: "Financially motivated group targeting payment systems and banks",
 },
 {
 id: "cobalt",
 name: "Cobalt Group",
 description: "Cybercriminal group specializing in ATM and payment card attacks",
 },
 { id: "fin6", name: "FIN6", description: "Financial threat group targeting point-of-sale systems" },
 ],
 government: [
 {
 id: "cozy_bear",
 name: "Cozy Bear (APT29)",
 description: "Russian foreign intelligence service targeting government agencies",
 },
 {
 id: "fancy_bear", 
 name: "Fancy Bear (APT28)",
 description: "Russian military intelligence group targeting defense and government",
 },
 {
 id: "comment_crew",
 name: "Comment Crew (APT1)",
 description: "Chinese group conducting cyber espionage against government targets",
 },
 { id: "turla", name: "Turla (APT29)", description: "Russian group targeting government and diplomatic entities" },
 {
 id: "kimsuky",
 name: "Kimsuky (APT43)",
 description: "North Korean group targeting government and defense organizations",
 },
 ],
 energy: [
 {
 id: "sandworm",
 name: "Sandworm (APT44)",
 description: "Russian group targeting critical infrastructure and energy facilities",
 },
 {
 id: "oilrig",
 name: "OilRig/Quilin (APT34)", 
 description: "Iranian group targeting energy and government sectors",
 },
 { id: "elfin", name: "Elfin (APT33)", description: "Iranian group focusing on aviation and energy companies" },
 ],
 technology: [
 {
 id: "winnti",
 name: "Winnti Group (APT41)",
 description: "Chinese group targeting technology companies and software supply chains",
 },
 {
 id: "stone_panda",
 name: "Stone Panda (APT10)",
 description: "Chinese group targeting technology and intellectual property",
 },
 {
 id: "deep_panda",
 name: "Deep Panda (APT19)",
 description: "Chinese group targeting technology and healthcare sectors",
 },
 ],
 telecommunications: [
 { id: "apt10", name: "APT10", description: "Chinese group targeting telecommunications infrastructure" },
 {
 id: "mustang_panda",
 name: "Mustang Panda (APT27)",
 description: "Chinese group targeting telecommunications and government",
 },
 { id: "reaper", name: "Reaper (APT37)", description: "North Korean group targeting telecommunications and media" },
 ],
 healthcare: [
 {
 id: "winnti_apt41",
 name: "Winnti/APT41",
 description: "Chinese group targeting healthcare data and pharmaceutical research",
 },
 {
 id: "wizard_spider",
 name: "Wizard Spider",
 description: "Ransomware group frequently targeting healthcare institutions",
 },
 ],
 aerospace: [
 {
 id: "emissary_panda",
 name: "Emissary Panda (APT27)",
 description: "Chinese group targeting aerospace and defense contractors",
 },
 ],
 maritime: [
 {
 id: "leviathan",
 name: "Leviathan (APT40)",
 description: "Chinese group targeting maritime industries and shipping companies",
 },
 ],
 education: [
 {
 id: "charming_kitten",
 name: "Charming Kitten (APT35)",
 description: "Iranian group targeting academic institutions and researchers",
 },
 {
 id: "ocean_lotus",
 name: "Ocean Lotus (APT32)",
 description: "Vietnamese group targeting academic and research organizations",
 },
 ],
 infrastructure: [
 {
 id: "sandworm_infra",
 name: "Sandworm (APT44)",
 description: "Russian group targeting critical national infrastructure",
 },
 {
 id: "equation_group",
 name: "Equation Group",
 description: "Advanced group targeting critical infrastructure worldwide",
 },
 ],
 retail: [
 { id: "fin7_retail", name: "FIN7", description: "Point-of-sale malware and payment card theft in retail" },
 { id: "carbanak_retail", name: "Carbanak", description: "Retail payment system attacks and e-commerce fraud" },
 ],
 manufacturing: [
 { id: "winnti_mfg", name: "Winnti Group", description: "Industrial espionage and intellectual property theft" },
 { id: "apt1_mfg", name: "APT1", description: "Chinese group targeting manufacturing and industrial secrets" },
 ],
 legal: [
 { id: "apt1_legal", name: "APT1", description: "Legal document and client data theft" },
 { id: "apt28_legal", name: "APT28", description: "Law firm espionage operations" },
 ],
 other: [
 { id: "apt1_general", name: "APT1", description: "General corporate espionage across industries" },
 { id: "apt28_general", name: "APT28", description: "Multi-industry targeting and espionage" },
 { id: "apt29_general", name: "APT29", description: "Broad spectrum intelligence gathering" },
 ],
}

const serviceTypes = [
 { id: "penetration-test", name: "Penetration Testing", description: "Comprehensive security assessment" },
 { id: "vulnerability-assessment", name: "Vulnerability Assessment", description: "Identify security weaknesses" },
 { id: "social-engineering", name: "Social Engineering", description: "Human factor security testing" },
 { id: "wireless-testing", name: "Wireless Security Testing", description: "Wi-Fi and wireless network assessment" },
]

const industries = [
 { value: "financial", label: "Financial Services" },
 { value: "government", label: "Government/Defense" },
 { value: "energy", label: "Energy/Utilities" },
 { value: "technology", label: "Technology/IT" },
 { value: "telecommunications", label: "Telecommunications" },
 { value: "healthcare", label: "Healthcare/Pharmaceutical" },
 { value: "aerospace", label: "Aerospace/Defense Contractors" },
 { value: "maritime", label: "Maritime/Shipping" },
 { value: "education", label: "Academic/Research" },
 { value: "infrastructure", label: "Critical National Infrastructure" },
 { value: "retail", label: "Retail & E-commerce" },
 { value: "manufacturing", label: "Manufacturing" },
 { value: "legal", label: "Legal Services" },
 { value: "other", label: "Other" },
]

const testReasons = [
 { id: "compliance", label: "Compliance Requirements", description: "Meeting regulatory or compliance standards." },
 { id: "due-diligence", label: "Due Diligence", description: "Security assessment for business purposes." },
 { id: "annual-testing", label: "Annual Security Testing", description: "Regular security posture evaluation." },
 { id: "incident-response", label: "Post-Incident Assessment", description: "Security review following a security incident." },
]

export default function CleanOriginalForm() {
 const [serviceType, setServiceType] = useState<string>("")
 const [selectedReasons, setSelectedReasons] = useState<string[]>([])
 const [selectedIndustry, setSelectedIndustry] = useState<string>("")
 const [selectedAPTs, setSelectedAPTs] = useState<string[]>([])
 const [showAllAPTs, setShowAllAPTs] = useState(false)
 const [dataPrivacyConsent, setDataPrivacyConsent] = useState(false)
 const [marketingConsent, setMarketingConsent] = useState(false)

 const [state, formAction, isPending] = useActionState(
 async (prevState: any, formData: FormData) => {
 if (!serviceType) {
 return { success: false, message: "Please select a service type." }
 }

 // Add state data to form
 formData.set("serviceType", serviceType)
 formData.set("selectedReasons", JSON.stringify(selectedReasons))
 formData.set("selectedIndustry", selectedIndustry)
 formData.set("selectedAPTs", JSON.stringify(selectedAPTs))
 formData.set("dataPrivacyConsent", dataPrivacyConsent.toString())
 formData.set("marketingConsent", marketingConsent.toString())

 try {
 const result = await submitPentestForm(prevState, formData)
 return result
 } catch (error) {
 return { success: false, message: "An error occurred while submitting your request." }
 }
 },
 { success: false, message: "" }
 )

 const currentAPTs = selectedIndustry ? industryAPTs[selectedIndustry as keyof typeof industryAPTs] || [] : []

 const handleReasonToggle = (reasonId: string) => {
 setSelectedReasons(prev =>
 prev.includes(reasonId) 
 ? prev.filter(id => id !== reasonId)
 : [...prev, reasonId]
 )
 }

 const handleAPTToggle = (aptId: string) => {
 setSelectedAPTs(prev =>
 prev.includes(aptId)
 ? prev.filter(id => id !== aptId)
 : [...prev, aptId]
 )
 }

 return (
 <section className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-50 via-charcoal/95 to-charcoal">
 <div className="container py-12 max-w-4xl">
 <ScrollAnimation animation="fade">
 <div className="text-center mb-16">
 <h1 className="text-4xl md:text-6xl font-bold text-charcoal mb-6">
 Build a Penetration Test
 </h1>
 <p className="text-xl text-charcoal/70 max-w-3xl mx-auto">
 Create a customized penetration testing proposal tailored to your organization's specific needs, industry, and threat landscape.
 </p>
 </div>
 </ScrollAnimation>

 <form action={formAction} className="space-y-8">
 {/* Service Type Selection */}
 <ScrollAnimation animation="slide-up" delay={0.1}>
 <Card>
 <CardHeader>
 <CardTitle className="flex items-center">
 <Shield className="w-6 h-6 mr-3 text-brandyellow" />
 Select Service Type
 </CardTitle>
 </CardHeader>
 <CardContent>
 <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
 {serviceTypes.map((service) => (
 <button
 key={service.id}
 type="button"
 onClick={() => setServiceType(service.id)}
 className={cn(
 "p-4 rounded-lg border-2 text-left transition-all",
 serviceType === service.id
 ? "border-brandyellow bg-brandyellow/5"
 : "border-gray-200 hover:border-brandyellow/50"
 )}
 >
 <div className="flex items-center justify-between mb-2">
 <h3 className="font-semibold">{service.name}</h3>
 {serviceType === service.id && <CheckCircle className="w-5 h-5 text-brandyellow" />}
 </div>
 <p className="text-sm text-gray-600">{service.description}</p>
 </button>
 ))}
 </div>
 </CardContent>
 </Card>
 </ScrollAnimation>

 {/* Reasons for Testing */}
 {serviceType && (
 <ScrollAnimation animation="slide-up" delay={0.2}>
 <Card>
 <CardHeader>
 <CardTitle>Reasons for Testing</CardTitle>
 </CardHeader>
 <CardContent>
 <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
 {testReasons.map((reason) => (
 <button
 key={reason.id}
 type="button"
 onClick={() => handleReasonToggle(reason.id)}
 className={cn(
 "p-4 rounded-lg border-2 text-left transition-all",
 selectedReasons.includes(reason.id)
 ? "border-brandyellow bg-brandyellow/5"
 : "border-gray-200 hover:border-brandyellow/50"
 )}
 >
 <div className="flex items-center justify-between mb-2">
 <h3 className="font-semibold">{reason.label}</h3>
 {selectedReasons.includes(reason.id) && <CheckCircle className="w-5 h-5 text-brandyellow" />}
 </div>
 <p className="text-sm text-gray-600">{reason.description}</p>
 </button>
 ))}
 </div>
 </CardContent>
 </Card>
 </ScrollAnimation>
 )}

 {/* Industry Selection */}
 {serviceType && (
 <ScrollAnimation animation="slide-up" delay={0.3}>
 <Card>
 <CardHeader>
 <CardTitle className="flex items-center">
 <Building className="w-6 h-6 mr-3 text-brandyellow" />
 Select Your Industry
 </CardTitle>
 </CardHeader>
 <CardContent>
 <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
 {industries.map((industry) => (
 <button
 key={industry.value}
 type="button"
 onClick={() => setSelectedIndustry(industry.value)}
 className={cn(
 "p-4 rounded-lg border-2 text-left transition-all",
 selectedIndustry === industry.value
 ? "border-brandyellow bg-brandyellow/5"
 : "border-gray-200 hover:border-brandyellow/50"
 )}
 >
 <div className="flex items-center justify-between">
 <h3 className="font-semibold">{industry.label}</h3>
 {selectedIndustry === industry.value && <CheckCircle className="w-5 h-5 text-brandyellow" />}
 </div>
 </button>
 ))}
 </div>
 </CardContent>
 </Card>
 </ScrollAnimation>
 )}

 {/* APT Groups */}
 {serviceType && serviceType !== "vulnerability-assessment" && selectedIndustry && currentAPTs.length > 0 && (
 <ScrollAnimation animation="slide-up" delay={0.4}>
 <Card>
 <CardHeader>
 <div className="flex items-center justify-between">
 <CardTitle className="flex items-center">
 <Shield className="w-6 h-6 mr-3 text-red-500" />
 Threat Actors to Simulate
 </CardTitle>
 <Button
 type="button"
 variant="outline"
 size="sm"
 onClick={() => setShowAllAPTs(!showAllAPTs)}
 >
 {showAllAPTs ? "Show Industry Specific" : "See All APTs"}
 </Button>
 </div>
 </CardHeader>
 <CardContent>
 <div className="space-y-3">
 {currentAPTs.map((apt) => (
 <button
 key={apt.id}
 type="button"
 onClick={() => handleAPTToggle(apt.id)}
 className={cn(
 "w-full p-4 rounded-lg border-2 text-left transition-all",
 selectedAPTs.includes(apt.id)
 ? "border-red-500 bg-red-50"
 : "border-gray-200 hover:border-red-300"
 )}
 >
 <div className="flex items-center justify-between mb-2">
 <h3 className="font-semibold">{apt.name}</h3>
 {selectedAPTs.includes(apt.id) && <CheckCircle className="w-5 h-5 text-red-500" />}
 </div>
 <p className="text-sm text-gray-600">{apt.description}</p>
 </button>
 ))}
 </div>
 </CardContent>
 </Card>
 </ScrollAnimation>
 )}

 {/* Contact Information */}
 {serviceType && (
 <ScrollAnimation animation="slide-up" delay={0.5}>
 <Card>
 <CardHeader>
 <CardTitle>Contact Information</CardTitle>
 </CardHeader>
 <CardContent className="space-y-6">
 <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
 <div>
 <Label htmlFor="firstName">First Name *</Label>
 <Input id="firstName" name="firstName" required />
 </div>
 <div>
 <Label htmlFor="lastName">Last Name *</Label>
 <Input id="lastName" name="lastName" required />
 </div>
 </div>
 <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
 <div>
 <Label htmlFor="email">Email Address *</Label>
 <Input id="email" name="email" type="email" required />
 </div>
 <div>
 <Label htmlFor="phone">Phone Number</Label>
 <Input id="phone" name="phone" type="tel" />
 </div>
 </div>
 <div>
 <Label htmlFor="company">Company Name *</Label>
 <Input id="company" name="company" required />
 </div>
 <div>
 <Label htmlFor="employees">Number of Employees</Label>
 <Input id="employees" name="employees" placeholder="e.g., 100-500" />
 </div>
 <div>
 <Label htmlFor="timeline">Preferred Timeline</Label>
 <Input id="timeline" name="timeline" placeholder="e.g., Within 30 days" />
 </div>
 <div>
 <Label htmlFor="additionalInfo">Additional Information</Label>
 <Textarea id="additionalInfo" name="additionalInfo" rows={4} placeholder="Any specific requirements or additional details..." />
 </div>
 </CardContent>
 </Card>
 </ScrollAnimation>
 )}

 {/* Consent */}
 {serviceType && (
 <ScrollAnimation animation="slide-up" delay={0.6}>
 <Card>
 <CardContent className="pt-6 space-y-4">
 <div className="flex items-start space-x-3">
 <input
 type="checkbox"
 id="dataPrivacy"
 checked={dataPrivacyConsent}
 onChange={(e) => setDataPrivacyConsent(e.target.checked)}
 className="mt-1"
 required
 />
 <label htmlFor="dataPrivacy" className="text-sm">
 I consent to the processing of my personal data as outlined in the privacy policy. *
 </label>
 </div>
 <div className="flex items-start space-x-3">
 <input
 type="checkbox"
 id="marketing"
 checked={marketingConsent}
 onChange={(e) => setMarketingConsent(e.target.checked)}
 className="mt-1"
 />
 <label htmlFor="marketing" className="text-sm">
 I would like to receive marketing communications about your services.
 </label>
 </div>
 </CardContent>
 </Card>
 </ScrollAnimation>
 )}

 {/* Submit Button */}
 {serviceType && (
 <div className="text-center">
 <Button
 type="submit"
 size="lg"
 disabled={isPending || !dataPrivacyConsent}
 className="bg-brandyellow hover:bg-brightyellow text-charcoal font-bold px-8 py-4"
 >
 {isPending ? "Submitting..." : "Request Quote"}
 </Button>

 {state.message && (
 <div className={cn(
 "mt-4 p-4 rounded-lg max-w-md mx-auto",
 state.success 
 ? "bg-green-50 text-green-800 border border-green-200" 
 : "bg-red-50 text-red-800 border border-red-200"
 )}>
 {state.message}
 </div>
 )}
 </div>
 )}
 </form>
 </div>
 </section>
 )
}