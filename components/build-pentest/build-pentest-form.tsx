"use client"

import type React from "react"

import { useState, useMemo, useCallback, useActionState, useOptimistic } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Checkbox } from "@/components/ui/checkbox"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { CheckCircle, Shield, Building, Users, MapPin, DollarSign, Calendar, Mail, Phone } from "lucide-react"
import ScrollAnimation from "../scroll-animation"
import { submitPentestForm } from "@/lib/actions"

const industryAPTs = {
 financial: [
 {
 id: "lazarus",
 name: "Lazarus Group (APT38)",
 description: "North Korean group targeting financial institutions and SWIFT networks",
 },
 {
 id: "carbanak",
 name: "Carbanak/FIN7",
 description: "Financially motivated group targeting payment systems and banks",
 },
 {
 id: "cobalt",
 name: "Cobalt Group",
 description: "Cybercriminal group specializing in ATM and payment card attacks",
 },
 { id: "fin6", name: "FIN6", description: "Financial threat group targeting point-of-sale systems" },
 ],
 government: [
 {
 id: "cozy_bear",
 name: "Cozy Bear (APT29)",
 description: "Russian foreign intelligence service targeting government agencies",
 },
 {
 id: "fancy_bear",
 name: "Fancy Bear (APT28)",
 description: "Russian military intelligence group targeting defense and government",
 },
 {
 id: "comment_crew",
 name: "Comment Crew (APT1)",
 description: "Chinese group conducting cyber espionage against government targets",
 },
 { id: "turla", name: "Turla (APT29)", description: "Russian group targeting government and diplomatic entities" },
 {
 id: "kimsuky",
 name: "Kimsuky (APT43)",
 description: "North Korean group targeting government and defense organizations",
 },
 ],
 energy: [
 {
 id: "sandworm",
 name: "Sandworm (APT44)",
 description: "Russian group targeting critical infrastructure and energy facilities",
 },
 {
 id: "oilrig",
 name: "OilRig/Quilin (APT34)",
 description: "Iranian group targeting energy and government sectors",
 },
 { id: "elfin", name: "Elfin (APT33)", description: "Iranian group focusing on aviation and energy companies" },
 ],
 technology: [
 {
 id: "winnti",
 name: "Winnti Group (APT41)",
 description: "Chinese group targeting technology companies and software supply chains",
 },
 {
 id: "stone_panda",
 name: "Stone Panda (APT10)",
 description: "Chinese group targeting technology and intellectual property",
 },
 {
 id: "deep_panda",
 name: "Deep Panda (APT19)",
 description: "Chinese group targeting technology and healthcare sectors",
 },
 ],
 telecommunications: [
 { id: "apt10", name: "APT10", description: "Chinese group targeting telecommunications infrastructure" },
 {
 id: "mustang_panda",
 name: "Mustang Panda (APT27)",
 description: "Chinese group targeting telecommunications and government",
 },
 { id: "reaper", name: "Reaper (APT37)", description: "North Korean group targeting telecommunications and media" },
 ],
 healthcare: [
 {
 id: "winnti_apt41",
 name: "Winnti/APT41",
 description: "Chinese group targeting healthcare data and pharmaceutical research",
 },
 {
 id: "wizard_spider",
 name: "Wizard Spider",
 description: "Ransomware group frequently targeting healthcare institutions",
 },
 ],
 aerospace: [
 {
 id: "emissary_panda",
 name: "Emissary Panda (APT27)",
 description: "Chinese group targeting aerospace and defense contractors",
 },
 ],
 maritime: [
 {
 id: "leviathan",
 name: "Leviathan (APT40)",
 description: "Chinese group targeting maritime industries and shipping companies",
 },
 ],
 education: [
 {
 id: "charming_kitten",
 name: "Charming Kitten (APT35)",
 description: "Iranian group targeting academic institutions and researchers",
 },
 {
 id: "ocean_lotus",
 name: "Ocean Lotus (APT32)",
 description: "Vietnamese group targeting academic and research organizations",
 },
 ],
 infrastructure: [
 {
 id: "sandworm_infra",
 name: "Sandworm (APT44)",
 description: "Russian group targeting critical national infrastructure",
 },
 {
 id: "equation_group",
 name: "Equation Group",
 description: "Advanced group targeting critical infrastructure worldwide",
 },
 ],
 retail: [
 { id: "fin7_retail", name: "FIN7", description: "Point-of-sale malware and payment card theft in retail" },
 { id: "carbanak_retail", name: "Carbanak", description: "Retail payment system attacks and e-commerce fraud" },
 ],
 manufacturing: [
 { id: "winnti_mfg", name: "Winnti Group", description: "Industrial espionage and intellectual property theft" },
 { id: "apt1_mfg", name: "APT1", description: "Chinese group targeting manufacturing and industrial secrets" },
 ],
 legal: [
 { id: "apt1_legal", name: "APT1", description: "Legal document and client data theft" },
 { id: "apt28_legal", name: "APT28", description: "Law firm espionage operations" },
 ],
 other: [
 { id: "apt1_general", name: "APT1", description: "General corporate espionage across industries" },
 { id: "apt28_general", name: "APT28", description: "Multi-industry targeting and espionage" },
 { id: "apt29_general", name: "APT29", description: "Broad spectrum intelligence gathering" },
 ],
}

// Comprehensive list of all APTs across all industries
const allAPTs = [
 // Financial Services
 {
 id: "lazarus",
 name: "Lazarus Group (APT38)",
 description: "North Korean group targeting financial institutions and SWIFT networks",
 industry: "Financial Services",
 },
 {
 id: "carbanak",
 name: "Carbanak/FIN7",
 description: "Financially motivated group targeting payment systems and banks",
 industry: "Financial Services",
 },
 {
 id: "cobalt",
 name: "Cobalt Group",
 description: "Cybercriminal group specializing in ATM and payment card attacks",
 industry: "Financial Services",
 },
 {
 id: "fin6",
 name: "FIN6",
 description: "Financial threat group targeting point-of-sale systems",
 industry: "Financial Services",
 },

 // Government/Defense
 {
 id: "cozy_bear",
 name: "Cozy Bear (APT29)",
 description: "Russian foreign intelligence service targeting government agencies",
 industry: "Government/Defense",
 },
 {
 id: "fancy_bear",
 name: "Fancy Bear (APT28)",
 description: "Russian military intelligence group targeting defense and government",
 industry: "Government/Defense",
 },
 {
 id: "comment_crew",
 name: "Comment Crew (APT1)",
 description: "Chinese group conducting cyber espionage against government targets",
 industry: "Government/Defense",
 },
 {
 id: "turla",
 name: "Turla (APT29)",
 description: "Russian group targeting government and diplomatic entities",
 industry: "Government/Defense",
 },
 {
 id: "kimsuky",
 name: "Kimsuky (APT43)",
 description: "North Korean group targeting government and defense organizations",
 industry: "Government/Defense",
 },

 // Energy/Utilities
 {
 id: "sandworm",
 name: "Sandworm (APT44)",
 description: "Russian group targeting critical infrastructure and energy facilities",
 industry: "Energy/Utilities",
 },
 {
 id: "oilrig",
 name: "OilRig/Quilin (APT34)",
 description: "Iranian group targeting energy and government sectors",
 industry: "Energy/Utilities",
 },
 {
 id: "elfin",
 name: "Elfin (APT33)",
 description: "Iranian group focusing on aviation and energy companies",
 industry: "Energy/Utilities",
 },

 // Technology/IT
 {
 id: "winnti",
 name: "Winnti Group (APT41)",
 description: "Chinese group targeting technology companies and software supply chains",
 industry: "Technology/IT",
 },
 {
 id: "stone_panda",
 name: "Stone Panda (APT10)",
 description: "Chinese group targeting technology and intellectual property",
 industry: "Technology/IT",
 },
 {
 id: "deep_panda",
 name: "Deep Panda (APT19)",
 description: "Chinese group targeting technology and healthcare sectors",
 industry: "Technology/IT",
 },

 // Telecommunications
 {
 id: "apt10",
 name: "APT10",
 description: "Chinese group targeting telecommunications infrastructure",
 industry: "Telecommunications",
 },
 {
 id: "mustang_panda",
 name: "Mustang Panda (APT27)",
 description: "Chinese group targeting telecommunications and government",
 industry: "Telecommunications",
 },
 {
 id: "reaper",
 name: "Reaper (APT37)",
 description: "North Korean group targeting telecommunications and media",
 industry: "Telecommunications",
 },

 // Healthcare/Pharmaceutical
 {
 id: "winnti_apt41",
 name: "Winnti/APT41",
 description: "Chinese group targeting healthcare data and pharmaceutical research",
 industry: "Healthcare/Pharmaceutical",
 },
 {
 id: "wizard_spider",
 name: "Wizard Spider",
 description: "Ransomware group frequently targeting healthcare institutions",
 industry: "Healthcare/Pharmaceutical",
 },

 // Aerospace/Defense Contractors
 {
 id: "emissary_panda",
 name: "Emissary Panda (APT27)",
 description: "Chinese group targeting aerospace and defense contractors",
 industry: "Aerospace/Defense Contractors",
 },

 // Maritime/Shipping
 {
 id: "leviathan",
 name: "Leviathan (APT40)",
 description: "Chinese group targeting maritime industries and shipping companies",
 industry: "Maritime/Shipping",
 },

 // Academic/Research
 {
 id: "charming_kitten",
 name: "Charming Kitten (APT35)",
 description: "Iranian group targeting academic institutions and researchers",
 industry: "Academic/Research",
 },
 {
 id: "ocean_lotus",
 name: "Ocean Lotus (APT32)",
 description: "Vietnamese group targeting academic and research organizations",
 industry: "Academic/Research",
 },

 // Critical National Infrastructure
 {
 id: "sandworm_infra",
 name: "Sandworm (APT44)",
 description: "Russian group targeting critical national infrastructure",
 industry: "Critical National Infrastructure",
 },
 {
 id: "equation_group",
 name: "Equation Group",
 description: "Advanced group targeting critical infrastructure worldwide",
 industry: "Critical National Infrastructure",
 },
]

// Add comprehensive financial APTs list for "See All" option
const allFinancialAPTs = [
 {
 id: "lazarus",
 name: "Lazarus Group (APT38)",
 description: "North Korean group targeting financial institutions and SWIFT networks",
 },
 {
 id: "carbanak",
 name: "Carbanak/FIN7",
 description: "Financially motivated group targeting payment systems and banks",
 },
 {
 id: "cobalt",
 name: "Cobalt Group",
 description: "Cybercriminal group specializing in ATM and payment card attacks",
 },
 { id: "fin6", name: "FIN6", description: "Financial threat group targeting point-of-sale systems" },
 { id: "fin8", name: "FIN8", description: "Financial cybercriminal group targeting payment processors" },
 { id: "fin10", name: "FIN10", description: "Financially motivated threat group targeting financial data" },
 { id: "fin11", name: "FIN11", description: "Financial threat actor targeting banking and payment systems" },
 {
 id: "beagleboyz",
 name: "BeagleBoyz (APT38)",
 description: "North Korean group conducting bank heists and financial fraud",
 },
 {
 id: "bluenoroff",
 name: "Bluenoroff (APT38)",
 description: "North Korean group targeting financial institutions globally",
 },
 { id: "silence", name: "Silence Group", description: "Russian-speaking group targeting banks and payment systems" },
 { id: "moneytaker", name: "MoneyTaker", description: "Cybercriminal group targeting banks and payment processors" },
 {
 id: "evilnum",
 name: "Evilnum (APT-C-48)",
 description: "Group targeting financial technology companies and trading platforms",
 },
 {
 id: "temp_hermit",
 name: "TEMP.Hermit (APT34)",
 description: "Iranian group targeting financial institutions in the Middle East",
 },
 {
 id: "silent_librarian",
 name: "Silent Librarian/Cobalt Dickens (APT35)",
 description: "Iranian group targeting financial and academic credentials",
 },
]

const industries = [
 { value: "financial", label: "Financial Services" },
 { value: "government", label: "Government/Defense" },
 { value: "energy", label: "Energy/Utilities" },
 { value: "technology", label: "Technology/IT" },
 { value: "telecommunications", label: "Telecommunications" },
 { value: "healthcare", label: "Healthcare/Pharmaceutical" },
 { value: "aerospace", label: "Aerospace/Defense Contractors" },
 { value: "maritime", label: "Maritime/Shipping" },
 { value: "education", label: "Academic/Research" },
 { value: "infrastructure", label: "Critical National Infrastructure" },
 { value: "retail", label: "Retail & E-commerce" },
 { value: "manufacturing", label: "Manufacturing" },
 { value: "legal", label: "Legal Services" },
 { value: "other", label: "Other" },
]

const budgetRanges = [
 { value: "5k-15k", label: "£5,000 - £15,000" },
 { value: "15k-30k", label: "£15,000 - £30,000" },
 { value: "30k-50k", label: "£30,000 - £50,000" },
 { value: "50k-100k", label: "£50,000 - £100,000" },
 { value: "100k+", label: "£100,000+" },
 { value: "discuss", label: "Prefer to discuss" },
]

const timelineOptions = [
 { value: "urgent", label: "ASAP (1-2 weeks)" },
 { value: "fast", label: "Fast track (2-4 weeks)" },
 { value: "standard", label: "Standard (4-8 weeks)" },
 { value: "planned", label: "Planned (2-3 months)" },
 { value: "flexible", label: "Flexible timeline" },
]

const testReasons = [
 {
 id: "compliance",
 label: "Regulatory Compliance",
 description: "Meeting industry-specific regulations (e.g., PCI DSS, HIPAA).",
 },
 { id: "security_audit", label: "Security Audit", description: "Preparing for a security audit or certification." },
 {
 id: "new_feature",
 label: "New Feature Testing",
 description: "Ensuring the security of newly implemented features or systems.",
 },
 {
 id: "risk_assessment",
 label: "Risk Assessment",
 description: "Identifying potential vulnerabilities and risks in your infrastructure.",
 },
 {
 id: "incident_response",
 label: "Incident Response",
 description: "Validating incident response plans and capabilities.",
 },
 {
 id: "vendor_assessment",
 label: "Vendor Assessment",
 description: "Assessing the security posture of third-party vendors.",
 },
 { id: "insurance", label: "Cyber Insurance", description: "Meeting requirements for cyber insurance coverage." },
 {
 id: "due_diligence",
 label: "Mergers & Acquisitions",
 description: "Performing security due diligence for M&A activities.",
 },
 { id: "other", label: "Other", description: "Other reasons not listed." },
]

export default function BuildPentestForm() {
 const [serviceType, setServiceType] = useState<string>("")
 const [selectedReasons, setSelectedReasons] = useState<string[]>([])
 const [selectedIndustry, setSelectedIndustry] = useState<string>("")
 const [selectedAPTs, setSelectedAPTs] = useState<string[]>([])
 const [formData, setFormData] = useState({
 employees: "",
 locations: "",
 budget: "",
 timeline: "",
 firstName: "",
 lastName: "",
 email: "",
 phone: "",
 company: "",
 jobTitle: "",
 additionalInfo: "",
 })
 
 const [dataPrivacyConsent, setDataPrivacyConsent] = useState(false)
 const [marketingConsent, setMarketingConsent] = useState(false)

 const [showAllFinancial, setShowAllFinancial] = useState(false)
 const [showAllAPTs, setShowAllAPTs] = useState(false)

 const handleReasonChange = useCallback((reasonId: string, checked: boolean) => {
 if (checked) {
 setSelectedReasons(prev => [...prev, reasonId])
 } else {
 setSelectedReasons(prev => prev.filter((id) => id !== reasonId))
 }
 }, [])

 const handleAPTChange = useCallback((aptId: string, checked: boolean) => {
 if (checked) {
 setSelectedAPTs(prev => [...prev, aptId])
 } else {
 setSelectedAPTs(prev => prev.filter((id) => id !== aptId))
 }
 }, [])

 const handleInputChange = useCallback((field: string, value: string) => {
 setFormData(prev => ({ ...prev, [field]: value }))
 }, [])

 // React 19 useActionState for form handling
 const [formState, formAction, isPending] = useActionState(submitPentestForm, {
 message: undefined,
 error: undefined,
 success: false
 })

 // Optimistic updates for better UX
 const [optimisticSubmitting, addOptimisticSubmitting] = useOptimistic(
 false,
 (state, newState: boolean) => newState
 )

 const handleSubmit = async (formDataObj: FormData) => {
 // Validate service type selection
 if (!serviceType) {
 alert('Please select a service type to continue.')
 return
 }
 
 // Validate data privacy consent
 if (!dataPrivacyConsent) {
 alert('Please accept the data privacy consent to continue.')
 return
 }
 
 addOptimisticSubmitting(true)

 // Prepare form data for server action
 const submissionData = {
 serviceType,
 companyName: formData.company,
 email: formData.email,
 phone: formData.phone,
 websiteUrl: '', // Add if needed
 companySize: formData.employees,
 industry: selectedIndustry,
 timeline: formData.timeline,
 description: generateDetailedRequirements(),
 complianceStandards: selectedReasons,
 budget: formData.budget,
 additionalServices: selectedAPTs,
 firstName: formData.firstName,
 lastName: formData.lastName
 }

 // Call server action
 const result = await formAction(submissionData)
 
 if (result?.success) {
 // Reset form on success
 setServiceType("")
 setSelectedReasons([])
 setSelectedIndustry("")
 setSelectedAPTs([])
 setFormData({
 employees: "",
 locations: "",
 budget: "",
 timeline: "",
 firstName: "",
 lastName: "",
 email: "",
 phone: "",
 company: "",
 jobTitle: "",
 additionalInfo: "",
 })
 setDataPrivacyConsent(false)
 setMarketingConsent(false)
 }
 
 addOptimisticSubmitting(false)
 }

 const generateDetailedRequirements = () => {
 let details = "=== SECURITY ASSESSMENT REQUIREMENTS ===\n\n"
 
 // Service type
 const serviceTypeLabels = {
 "vulnerability-assessment": "Vulnerability Assessment",
 "penetration-test": "Penetration Test",
 "threat-led-pentest": "Threat-Led Penetration Test",
 "red-team": "Red Team"
 }
 details += `SERVICE TYPE: ${serviceTypeLabels[serviceType] || serviceType}\n\n`
 
 // Test reasons (only for non-vulnerability assessment)
 if (serviceType !== "vulnerability-assessment" && selectedReasons.length > 0) {
 details += "REASONS FOR TESTING:\n"
 selectedReasons.forEach(reasonId => {
 const reason = testReasons.find(r => r.id === reasonId)
 if (reason) {
 details += `• ${reason.label}: ${reason.description}\n`
 }
 })
 details += "\n"
 }

 // Industry and APTs
 if (selectedIndustry) {
 const industry = industries.find(i => i.value === selectedIndustry)
 details += `INDUSTRY: ${industry?.label}\n\n`
 }

 if (selectedAPTs.length > 0) {
 details += "SELECTED THREAT ACTORS FOR SIMULATION:\n"
 selectedAPTs.forEach(aptId => {
 const apt = showAllAPTs
 ? allAPTs.find(a => a.id === aptId)
 : selectedIndustry === "financial" && showAllFinancial
 ? allFinancialAPTs.find(a => a.id === aptId)
 : currentAPTs.find(a => a.id === aptId)
 if (apt) {
 details += `• ${apt.name}: ${apt.description}\n`
 }
 })
 details += "\n"
 }

 // Organization details
 details += "ORGANIZATION DETAILS:\n"
 if (formData.employees) details += `• Employee Count: ${formData.employees}\n`
 if (formData.locations) details += `• Physical Locations: ${formData.locations}\n`
 if (formData.budget) details += `• Budget Range: ${formData.budget}\n`
 if (formData.timeline) details += `• Timeline: ${formData.timeline}\n`
 details += "\n"

 // Additional information
 if (formData.additionalInfo) {
 details += "ADDITIONAL REQUIREMENTS:\n"
 details += formData.additionalInfo + "\n\n"
 }

 details += `Form submitted: ${new Date().toLocaleString()}`
 
 return details
 }

 const currentAPTs = useMemo(() => {
 return selectedIndustry ? industryAPTs[selectedIndustry as keyof typeof industryAPTs] || [] : []
 }, [selectedIndustry])

 const handleServiceTypeChange = useCallback((newServiceType: string) => {
 if (newServiceType === "") {
 setServiceType("")
 } else {
 setServiceType(prev => prev === newServiceType ? "" : newServiceType)
 }
 }, [])

 return (
 <section className="pt-8 pb-20 md:py-20 bg-white/95 backdrop-blur-sm">
 <div className="container max-w-4xl">
 <ScrollAnimation animation="fade">
 <div className="text-center mb-16">
 <h2 className="text-4xl md:text-5xl font-bold text-charcoal mb-4">
 Build a Penetration Test
 </h2>
 <p className="text-xl text-charcoal/80 max-w-3xl mx-auto">
 Create a customised penetration testing proposal tailored to your organisation's specific needs, industry,
 and threat landscape.
 </p>
 </div>
 </ScrollAnimation>

 <form action={handleSubmit} className="space-y-8">
 {/* Service Type Selection */}
 <ScrollAnimation animation="slide-up" delay={0.2}>
 <Card className="shadow-lg border-0 bg-white ">
 <CardHeader>
 <CardTitle className="flex items-center text-charcoal ">
 <Shield className="w-6 h-6 mr-3 text-blue-500" />
 What type of security assessment do you need?
 </CardTitle>
 </CardHeader>
 <CardContent>
 <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
 <div
 className={`relative p-4 rounded-lg border-2 cursor-pointer transition-all ${
 serviceType === "vulnerability-assessment"
 ? "border-blue-500 bg-blue-50 "
 : "border-gray-200 hover:border-gray-300 "
 }`}
 onClick={(e) => {
 e.preventDefault()
 handleServiceTypeChange("vulnerability-assessment")
 }}
 >
 <div className="flex items-start space-x-3">
 <Checkbox
 checked={serviceType === "vulnerability-assessment"}
 onCheckedChange={(checked) => {
 handleServiceTypeChange(checked ? "vulnerability-assessment" : "")
 }}
 className="mt-1"
 onClick={(e) => e.stopPropagation()}
 />
 <div className="flex-1">
 <h4 className="font-semibold text-charcoal ">Vulnerability Assessment</h4>
 <p className="text-sm text-charcoal/70 mt-1">
 A systematic review of systems and networks to identify security weaknesses, misconfigurations, and missing patches without actively exploiting them
 </p>
 </div>
 </div>
 </div>

 <div
 className={`relative p-4 rounded-lg border-2 cursor-pointer transition-all ${
 serviceType === "penetration-test"
 ? "border-blue-500 bg-blue-50 "
 : "border-gray-200 hover:border-gray-300 "
 }`}
 onClick={(e) => {
 e.preventDefault()
 handleServiceTypeChange("penetration-test")
 }}
 >
 <div className="flex items-start space-x-3">
 <Checkbox
 checked={serviceType === "penetration-test"}
 onCheckedChange={(checked) => handleServiceTypeChange(checked ? "penetration-test" : "")}
 className="mt-1"
 onClick={(e) => e.stopPropagation()}
 />
 <div className="flex-1">
 <h4 className="font-semibold text-charcoal ">Penetration Test</h4>
 <p className="text-sm text-charcoal/70 mt-1">
 A controlled simulated cyber attack to test defenses by attempting to exploit vulnerabilities and gain unauthorized access
 </p>
 </div>
 </div>
 </div>

 <div
 className={`relative p-4 rounded-lg border-2 cursor-pointer transition-all ${
 serviceType === "threat-led-pentest"
 ? "border-blue-500 bg-blue-50 "
 : "border-gray-200 hover:border-gray-300 "
 }`}
 onClick={(e) => {
 e.preventDefault()
 handleServiceTypeChange("threat-led-pentest")
 }}
 >
 <div className="flex items-start space-x-3">
 <Checkbox
 checked={serviceType === "threat-led-pentest"}
 onCheckedChange={(checked) => handleServiceTypeChange(checked ? "threat-led-pentest" : "")}
 className="mt-1"
 onClick={(e) => e.stopPropagation()}
 />
 <div className="flex-1">
 <h4 className="font-semibold text-charcoal ">Threat-Led Penetration Test</h4>
 <p className="text-sm text-charcoal/70 mt-1">
 An intelligence-driven test that simulates specific threat actors relevant to your industry, using their known tactics, techniques, and procedures (TTPs)
 </p>
 </div>
 </div>
 </div>

 <div
 className={`relative p-4 rounded-lg border-2 cursor-pointer transition-all ${
 serviceType === "red-team"
 ? "border-blue-500 bg-blue-50 "
 : "border-gray-200 hover:border-gray-300 "
 }`}
 onClick={(e) => {
 e.preventDefault()
 handleServiceTypeChange("red-team")
 }}
 >
 <div className="flex items-start space-x-3">
 <Checkbox
 checked={serviceType === "red-team"}
 onCheckedChange={(checked) => handleServiceTypeChange(checked ? "red-team" : "")}
 className="mt-1"
 onClick={(e) => e.stopPropagation()}
 />
 <div className="flex-1">
 <h4 className="font-semibold text-charcoal ">Red Team</h4>
 <p className="text-sm text-charcoal/70 mt-1">
 A goal-based adversarial simulation over an extended period, testing your organization's detection and response capabilities against realistic attack scenarios
 </p>
 </div>
 </div>
 </div>
 </div>

 {/* What's the difference tooltip */}
 <div className="mt-4 text-center">
 <p className="text-sm text-charcoal/60 italic">
 Not sure which one you need? Each option includes a detailed description to help you choose.
 </p>
 </div>
 </CardContent>
 </Card>
 </ScrollAnimation>

 {/* Test Reasons - Only show for non-vulnerability assessment */}
 {serviceType && serviceType !== "vulnerability-assessment" && (
 <ScrollAnimation animation="slide-up" delay={0.2}>
 <Card className="shadow-lg border-0 bg-white ">
 <CardHeader>
 <CardTitle className="flex items-center text-charcoal ">
 <Shield className="w-6 h-6 mr-3 text-blue-500" />
 Why do you need a penetration test?
 </CardTitle>
 </CardHeader>
 <CardContent>
 <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
 {testReasons.map((reason) => (
 <div
 key={reason.id}
 className="flex items-start space-x-3 p-3 rounded-lg hover:bg-gray-50 transition-colors"
 >
 <Checkbox
 id={reason.id}
 checked={selectedReasons.includes(reason.id)}
 onCheckedChange={(checked) => handleReasonChange(reason.id, checked as boolean)}
 className="mt-1"
 />
 <div className="flex-1">
 <Label
 htmlFor={reason.id}
 className="font-semibold text-charcoal cursor-pointer"
 >
 {reason.label}
 </Label>
 <p className="text-sm text-charcoal/70 mt-1">{reason.description}</p>
 </div>
 </div>
 ))}
 </div>
 </CardContent>
 </Card>
 </ScrollAnimation>
 )}

 {/* Industry Selection - Only show for non-vulnerability assessment */}
 {serviceType && serviceType !== "vulnerability-assessment" && (
 <ScrollAnimation animation="slide-up" delay={0.3}>
 <Card className="shadow-lg border-0 bg-white ">
 <CardHeader>
 <CardTitle className="flex items-center text-charcoal ">
 <Building className="w-6 h-6 mr-3 text-green-500" />
 What industry are you in?
 </CardTitle>
 </CardHeader>
 <CardContent>
 <Select value={selectedIndustry} onValueChange={setSelectedIndustry}>
 <SelectTrigger className="w-full">
 <SelectValue placeholder="Select your industry" />
 </SelectTrigger>
 <SelectContent>
 {industries.map((industry) => (
 <SelectItem key={industry.value} value={industry.value}>
 {industry.label}
 </SelectItem>
 ))}
 </SelectContent>
 </Select>
 </CardContent>
 </Card>
 </ScrollAnimation>
 )}

 {/* APT Selection - Only show for non-vulnerability assessment */}
 {serviceType && serviceType !== "vulnerability-assessment" && selectedIndustry && currentAPTs.length > 0 && (
 <ScrollAnimation animation="slide-up" delay={0.4}>
 <Card className="shadow-lg border-0 bg-white ">
 <CardHeader>
 <div className="flex items-center justify-between flex-wrap gap-2">
 <CardTitle className="flex items-center text-charcoal ">
 <Shield className="w-6 h-6 mr-3 text-red-500" />
 {showAllAPTs ? "All Threat Actors" : "Industry-Specific Threat Actors"}
 </CardTitle>
 <div className="flex gap-2">
 <Button
 type="button"
 variant="outline"
 size="sm"
 onClick={() => setShowAllAPTs(!showAllAPTs)}
 className="text-sm"
 >
 {showAllAPTs ? "Show Industry-Specific" : "Show All APTs"}
 </Button>
 {selectedIndustry === "financial" && !showAllAPTs && (
 <Button
 type="button"
 variant="outline"
 size="sm"
 onClick={() => setShowAllFinancial(!showAllFinancial)}
 className="text-sm"
 >
 {showAllFinancial ? "Show Less" : "See All Financial"}
 </Button>
 )}
 </div>
 </div>
 <p className="text-sm text-charcoal/70 mt-2">
 {showAllAPTs
 ? "Browse all Advanced Persistent Threats (APTs) across all industries to build comprehensive testing scenarios."
 : "Select the Advanced Persistent Threats (APTs) that are most relevant to your industry for targeted testing scenarios."}
 </p>
 </CardHeader>
 <CardContent>
 <div className="space-y-4 max-h-[500px] overflow-y-auto">
 {(showAllAPTs
 ? allAPTs
 : selectedIndustry === "financial" && showAllFinancial
 ? allFinancialAPTs
 : currentAPTs
 ).map((apt) => (
 <div
 key={apt.id}
 className="flex items-start space-x-3 p-4 rounded-lg border border-gray-200 hover:bg-gray-50 transition-colors"
 >
 <Checkbox
 id={apt.id}
 checked={selectedAPTs.includes(apt.id)}
 onCheckedChange={(checked) => handleAPTChange(apt.id, checked as boolean)}
 className="mt-1"
 />
 <div className="flex-1">
 <div className="flex items-center gap-2 mb-1">
 <Label
 htmlFor={apt.id}
 className="font-semibold text-charcoal cursor-pointer"
 >
 {apt.name}
 </Label>
 {showAllAPTs && apt.industry && (
 <Badge variant="outline" className="text-xs">
 {apt.industry}
 </Badge>
 )}
 </div>
 <p className="text-sm text-charcoal/70 ">{apt.description}</p>
 </div>
 </div>
 ))}
 </div>
 </CardContent>
 </Card>
 </ScrollAnimation>
 )}

 {/* Organization Details */}
 <ScrollAnimation animation="slide-up" delay={0.5}>
 <Card className="shadow-lg border-0 bg-white ">
 <CardHeader>
 <CardTitle className="flex items-center text-charcoal ">
 <Building className="w-6 h-6 mr-3 text-purple-500" />
 Organization Details
 </CardTitle>
 </CardHeader>
 <CardContent className="space-y-6">
 <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
 <div>
 <Label htmlFor="employees" className="flex items-center text-charcoal mb-2">
 <Users className="w-4 h-4 mr-2" />
 Number of Employees
 </Label>
 <Select value={formData.employees} onValueChange={(value) => handleInputChange("employees", value)}>
 <SelectTrigger>
 <SelectValue placeholder="Select employee count" />
 </SelectTrigger>
 <SelectContent>
 <SelectItem value="1-10">1-10 employees</SelectItem>
 <SelectItem value="11-50">11-50 employees</SelectItem>
 <SelectItem value="51-200">51-200 employees</SelectItem>
 <SelectItem value="201-500">201-500 employees</SelectItem>
 <SelectItem value="501-1000">501-1,000 employees</SelectItem>
 <SelectItem value="1000+">1,000+ employees</SelectItem>
 </SelectContent>
 </Select>
 </div>

 <div>
 <Label htmlFor="locations" className="flex items-center text-charcoal mb-2">
 <MapPin className="w-4 h-4 mr-2" />
 Physical Locations
 </Label>
 <Input
 id="locations"
 placeholder="e.g., 3 offices (London, New York, Dubai)"
 value={formData.locations}
 onChange={(e) => handleInputChange("locations", e.target.value)}
 />
 </div>
 </div>

 <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
 <div>
 <Label htmlFor="budget" className="flex items-center text-charcoal mb-2">
 <DollarSign className="w-4 h-4 mr-2" />
 Budget Range
 </Label>
 <Select value={formData.budget} onValueChange={(value) => handleInputChange("budget", value)}>
 <SelectTrigger>
 <SelectValue placeholder="Select budget range" />
 </SelectTrigger>
 <SelectContent>
 {budgetRanges.map((range) => (
 <SelectItem key={range.value} value={range.value}>
 {range.label}
 </SelectItem>
 ))}
 </SelectContent>
 </Select>
 </div>

 <div>
 <Label htmlFor="timeline" className="flex items-center text-charcoal mb-2">
 <Calendar className="w-4 h-4 mr-2" />
 Timeline
 </Label>
 <Select value={formData.timeline} onValueChange={(value) => handleInputChange("timeline", value)}>
 <SelectTrigger>
 <SelectValue placeholder="Select timeline" />
 </SelectTrigger>
 <SelectContent>
 {timelineOptions.map((option) => (
 <SelectItem key={option.value} value={option.value}>
 {option.label}
 </SelectItem>
 ))}
 </SelectContent>
 </Select>
 </div>
 </div>
 </CardContent>
 </Card>
 </ScrollAnimation>

 {/* Contact Details */}
 <ScrollAnimation animation="slide-up" delay={0.6}>
 <Card className="shadow-lg border-0 bg-white ">
 <CardHeader>
 <CardTitle className="flex items-center text-charcoal ">
 <Mail className="w-6 h-6 mr-3 text-orange-500" />
 Contact Details
 </CardTitle>
 </CardHeader>
 <CardContent className="space-y-6">
 <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
 <div>
 <Label htmlFor="firstName" className="text-charcoal ">
 First Name *
 </Label>
 <Input
 id="firstName"
 required
 value={formData.firstName}
 onChange={(e) => handleInputChange("firstName", e.target.value)}
 />
 </div>
 <div>
 <Label htmlFor="lastName" className="text-charcoal ">
 Last Name *
 </Label>
 <Input
 id="lastName"
 required
 value={formData.lastName}
 onChange={(e) => handleInputChange("lastName", e.target.value)}
 />
 </div>
 </div>

 <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
 <div>
 <Label htmlFor="email" className="text-charcoal ">
 Email Address *
 </Label>
 <Input
 id="email"
 type="email"
 required
 value={formData.email}
 onChange={(e) => handleInputChange("email", e.target.value)}
 />
 </div>
 <div>
 <Label htmlFor="phone" className="flex items-center text-charcoal ">
 <Phone className="w-4 h-4 mr-2" />
 Phone Number
 </Label>
 <Input
 id="phone"
 type="tel"
 value={formData.phone}
 onChange={(e) => handleInputChange("phone", e.target.value)}
 />
 </div>
 </div>

 <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
 <div>
 <Label htmlFor="company" className="text-charcoal ">
 Company Name *
 </Label>
 <Input
 id="company"
 required
 value={formData.company}
 onChange={(e) => handleInputChange("company", e.target.value)}
 />
 </div>
 <div>
 <Label htmlFor="jobTitle" className="text-charcoal ">
 Job Title
 </Label>
 <Input
 id="jobTitle"
 value={formData.jobTitle}
 onChange={(e) => handleInputChange("jobTitle", e.target.value)}
 />
 </div>
 </div>

 <div>
 <Label htmlFor="additionalInfo" className="text-charcoal ">
 Additional Information
 </Label>
 <Textarea
 id="additionalInfo"
 placeholder="Any specific requirements, concerns, or additional context..."
 value={formData.additionalInfo}
 onChange={(e) => handleInputChange("additionalInfo", e.target.value)}
 rows={4}
 />
 </div>

 {/* Data Privacy and Marketing Consent */}
 <div className="space-y-4 pt-4 border-t border-gray-200 ">
 <div className="flex items-start space-x-3">
 <Checkbox
 id="dataPrivacy"
 checked={dataPrivacyConsent}
 onCheckedChange={(checked) => setDataPrivacyConsent(checked as boolean)}
 className="mt-1"
 />
 <div className="flex-1">
 <Label
 htmlFor="dataPrivacy"
 className="text-sm font-medium text-charcoal cursor-pointer"
 >
 Data Privacy Consent *
 </Label>
 <p className="text-xs text-charcoal/70 mt-1">
 I consent to Closed Door Security processing my personal data in accordance with the{" "}
 <a href="/privacy-policy" className="underline" target="_blank">
 Privacy Policy
 </a>
 . I understand my data will be used to process this penetration test request.
 </p>
 </div>
 </div>

 <div className="flex items-start space-x-3">
 <Checkbox
 id="marketingConsent"
 checked={marketingConsent}
 onCheckedChange={(checked) => setMarketingConsent(checked as boolean)}
 className="mt-1"
 />
 <div className="flex-1">
 <Label
 htmlFor="marketingConsent"
 className="text-sm font-medium text-charcoal cursor-pointer"
 >
 Marketing Communications
 </Label>
 <p className="text-xs text-charcoal/70 mt-1">
 I would like to receive marketing communications about Closed Door Security's products, 
 services, and events. I can unsubscribe at any time.
 </p>
 </div>
 </div>
 </div>
 </CardContent>
 </Card>
 </ScrollAnimation>

 {/* Summary and Submit */}
 <ScrollAnimation animation="slide-up" delay={0.7}>
 <Card className="shadow-lg border-0 bg-gradient-to-br from-brandyellow/10 to-brightyellow/5 ">
 <CardHeader>
 <CardTitle className="flex items-center text-charcoal ">
 <CheckCircle className="w-6 h-6 mr-3 text-green-500" />
 Summary
 </CardTitle>
 </CardHeader>
 <CardContent className="space-y-4">
 {selectedReasons.length > 0 && (
 <div>
 <h4 className="font-semibold text-charcoal mb-2">Test Reasons:</h4>
 <div className="flex flex-wrap gap-2">
 {selectedReasons.map((reasonId) => {
 const reason = testReasons.find((r) => r.id === reasonId)
 return (
 <Badge key={reasonId} variant="secondary">
 {reason?.label}
 </Badge>
 )
 })}
 </div>
 </div>
 )}

 {selectedIndustry && (
 <div>
 <h4 className="font-semibold text-charcoal mb-2">Industry:</h4>
 <Badge className="bg-blue-100 text-blue-800 ">
 {industries.find((i) => i.value === selectedIndustry)?.label}
 </Badge>
 </div>
 )}

 {selectedAPTs.length > 0 && (
 <div>
 <h4 className="font-semibold text-charcoal mb-2">Selected Threat Actors:</h4>
 <div className="flex flex-wrap gap-2">
 {selectedAPTs.map((aptId) => {
 const apt = showAllAPTs
 ? allAPTs.find((a) => a.id === aptId)
 : selectedIndustry === "financial" && showAllFinancial
 ? allFinancialAPTs.find((a) => a.id === aptId)
 : currentAPTs.find((a) => a.id === aptId)
 return (
 <Badge key={aptId} className="bg-red-100 text-red-800 ">
 {apt?.name}
 </Badge>
 )
 })}
 </div>
 </div>
 )}

 <div className="pt-6 border-t border-gray-200 ">
 <Button
 type="submit"
 size="lg"
 disabled={isPending || optimisticSubmitting || !dataPrivacyConsent}
 className="w-full bg-charcoal hover:bg-charcoal/90 text-white font-semibold disabled:opacity-50 disabled:cursor-not-allowed"
 >
 {isPending || optimisticSubmitting ? 'Submitting Request...' : 'Submit Penetration Test Request'}
 </Button>
 
 {formState.success && (
 <div className="mt-4 p-4 bg-green-100 border border-green-200 rounded-lg">
 <p className="text-green-800 text-center font-medium">
 ✅ {formState.message || 'Request submitted successfully! Our team will contact you within 24 hours.'}
 </p>
 </div>
 )}
 
 {formState.error && (
 <div className="mt-4 p-4 bg-red-100 border border-red-200 rounded-lg">
 <p className="text-red-800 text-center font-medium">
 ❌ {formState.error}
 </p>
 </div>
 )}
 
 {!formState.success && !formState.error && (
 <p className="text-sm text-charcoal/70 text-center mt-3">
 Our team will review your requirements and contact you within 24 hours with a customised proposal.
 </p>
 )}
 </div>
 </CardContent>
 </Card>
 </ScrollAnimation>
 </form>
 </div>
 </section>
 )
}
