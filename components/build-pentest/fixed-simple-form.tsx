"use client"

import type React from "react"
import { useState } from "react"
import { cn } from "@/lib/utils"
import ScrollAnimation from "../scroll-animation"

// All the original data structures
const industryAPTs = {
  financial: [
    {
      id: "lazarus",
      name: "Lazarus Group (APT38)",
      description: "North Korean group targeting financial institutions and SWIFT networks",
    },
    {
      id: "carbanak",
      name: "Carbanak/FIN7",
      description: "Financially motivated group targeting payment systems and banks",
    },
    {
      id: "cobalt",
      name: "Cobalt Group",
      description: "Cybercriminal group specializing in ATM and payment card attacks",
    },
    { id: "fin6", name: "FIN6", description: "Financial threat group targeting point-of-sale systems" },
  ],
  government: [
    {
      id: "cozy_bear",
      name: "Cozy Bear (APT29)",
      description: "Russian foreign intelligence service targeting government agencies",
    },
    {
      id: "fancy_bear",
      name: "Fancy Bear (APT28)",
      description: "Russian military intelligence group targeting defense and government",
    },
    {
      id: "comment_crew",
      name: "Comment Crew (APT1)",
      description: "Chinese group conducting cyber espionage against government targets",
    },
    { id: "turla", name: "Turla (APT29)", description: "Russian group targeting government and diplomatic entities" },
    {
      id: "kimsuky",
      name: "Kimsuky (APT43)",
      description: "North Korean group targeting government and defense organizations",
    },
  ],
  energy: [
    {
      id: "sandworm",
      name: "Sandworm (APT44)",
      description: "Russian group targeting critical infrastructure and energy facilities",
    },
    {
      id: "oilrig",
      name: "OilRig/Quilin (APT34)",
      description: "Iranian group targeting energy and government sectors",
    },
    { id: "elfin", name: "Elfin (APT33)", description: "Iranian group focusing on aviation and energy companies" },
  ],
  technology: [
    {
      id: "winnti",
      name: "Winnti Group (APT41)",
      description: "Chinese group targeting technology companies and software supply chains",
    },
    {
      id: "stone_panda",
      name: "Stone Panda (APT10)",
      description: "Chinese group targeting technology and intellectual property",
    },
    {
      id: "deep_panda",
      name: "Deep Panda (APT19)",
      description: "Chinese group targeting technology and healthcare sectors",
    },
  ],
  telecommunications: [
    { id: "apt10", name: "APT10", description: "Chinese group targeting telecommunications infrastructure" },
    {
      id: "mustang_panda",
      name: "Mustang Panda (APT27)",
      description: "Chinese group targeting telecommunications and government",
    },
    { id: "reaper", name: "Reaper (APT37)", description: "North Korean group targeting telecommunications and media" },
  ],
  healthcare: [
    {
      id: "winnti_apt41",
      name: "Winnti/APT41",
      description: "Chinese group targeting healthcare data and pharmaceutical research",
    },
    {
      id: "wizard_spider",
      name: "Wizard Spider",
      description: "Ransomware group frequently targeting healthcare institutions",
    },
  ],
  aerospace: [
    {
      id: "emissary_panda",
      name: "Emissary Panda (APT27)",
      description: "Chinese group targeting aerospace and defense contractors",
    },
  ],
  maritime: [
    {
      id: "leviathan",
      name: "Leviathan (APT40)",
      description: "Chinese group targeting maritime industries and shipping companies",
    },
  ],
  education: [
    {
      id: "charming_kitten",
      name: "Charming Kitten (APT35)",
      description: "Iranian group targeting academic institutions and researchers",
    },
    {
      id: "ocean_lotus",
      name: "Ocean Lotus (APT32)",
      description: "Vietnamese group targeting academic and research organizations",
    },
  ],
  infrastructure: [
    {
      id: "sandworm_infra",
      name: "Sandworm (APT44)",
      description: "Russian group targeting critical national infrastructure",
    },
    {
      id: "equation_group",
      name: "Equation Group",
      description: "Advanced group targeting critical infrastructure worldwide",
    },
  ],
  retail: [
    { id: "fin7_retail", name: "FIN7", description: "Point-of-sale malware and payment card theft in retail" },
    { id: "carbanak_retail", name: "Carbanak", description: "Retail payment system attacks and e-commerce fraud" },
  ],
  manufacturing: [
    { id: "winnti_mfg", name: "Winnti Group", description: "Industrial espionage and intellectual property theft" },
    { id: "apt1_mfg", name: "APT1", description: "Chinese group targeting manufacturing and industrial secrets" },
  ],
  legal: [
    { id: "apt1_legal", name: "APT1", description: "Legal document and client data theft" },
    { id: "apt28_legal", name: "APT28", description: "Law firm espionage operations" },
  ],
  other: [
    { id: "apt1_general", name: "APT1", description: "General corporate espionage across industries" },
    { id: "apt28_general", name: "APT28", description: "Multi-industry targeting and espionage" },
    { id: "apt29_general", name: "APT29", description: "Broad spectrum intelligence gathering" },
  ],
}

const industries = [
  { value: "financial", label: "Financial Services" },
  { value: "government", label: "Government/Defense" },
  { value: "energy", label: "Energy/Utilities" },
  { value: "technology", label: "Technology/IT" },
  { value: "telecommunications", label: "Telecommunications" },
  { value: "healthcare", label: "Healthcare/Pharmaceutical" },
  { value: "aerospace", label: "Aerospace/Defense Contractors" },
  { value: "maritime", label: "Maritime/Shipping" },
  { value: "education", label: "Academic/Research" },
  { value: "infrastructure", label: "Critical National Infrastructure" },
  { value: "retail", label: "Retail & E-commerce" },
  { value: "manufacturing", label: "Manufacturing" },
  { value: "legal", label: "Legal Services" },
  { value: "other", label: "Other" },
]

const budgetRanges = [
  { value: "5k-15k", label: "£5,000 - £15,000" },
  { value: "15k-30k", label: "£15,000 - £30,000" },
  { value: "30k-50k", label: "£30,000 - £50,000" },
  { value: "50k-100k", label: "£50,000 - £100,000" },
  { value: "100k+", label: "£100,000+" },
  { value: "not-sure", label: "Not Sure" },
]

const employeeRanges = [
  { value: "1-10", label: "1-10 employees" },
  { value: "11-50", label: "11-50 employees" },
  { value: "51-200", label: "51-200 employees" },
  { value: "201-500", label: "201-500 employees" },
  { value: "501-1000", label: "501-1,000 employees" },
  { value: "1001-5000", label: "1,001-5,000 employees" },
  { value: "5000+", label: "5,000+ employees" },
]

const timelines = [
  { value: "asap", label: "As soon as possible" },
  { value: "1-2-weeks", label: "1-2 weeks" },
  { value: "2-4-weeks", label: "2-4 weeks" },
  { value: "1-2-months", label: "1-2 months" },
  { value: "2-3-months", label: "2-3 months" },
  { value: "3-6-months", label: "3-6 months" },
  { value: "6-months+", label: "6+ months" },
  { value: "not-sure", label: "Not sure yet" },
]

const testReasons = [
  {
    id: "compliance",
    label: "Compliance Requirements",
    description: "Meeting regulatory or compliance standards like PCI DSS, HIPAA, or SOC 2.",
  },
  {
    id: "due-diligence",
    label: "Due Diligence / Investment",
    description: "Security assessment for investors, acquisitions, or business partnerships.",
  },
  {
    id: "annual-testing",
    label: "Annual Security Testing",
    description: "Regular security posture evaluation and vulnerability assessment.",
  },
  {
    id: "incident-response",
    label: "Post-Incident Assessment",
    description: "Security review following a breach or security incident.",
  },
  {
    id: "new-infrastructure",
    label: "New Infrastructure/Application",
    description: "Testing newly deployed systems or applications before go-live.",
  },
  {
    id: "third-party",
    label: "Third-Party Requirement",
    description: "Client or partner requiring proof of security testing.",
  },
  {
    id: "risk-assessment",
    label: "Risk Management",
    description: "Proactive identification and mitigation of security risks.",
  },
  {
    id: "ma",
    label: "Mergers & Acquisitions",
    description: "Performing security due diligence for M&A activities.",
  },
  { id: "other", label: "Other", description: "Other reasons not listed." },
]

export default function FixedSimpleForm() {
  const [serviceType, setServiceType] = useState<string>("")
  const [selectedReasons, setSelectedReasons] = useState<string[]>([])
  const [selectedIndustry, setSelectedIndustry] = useState<string>("")
  const [selectedAPTs, setSelectedAPTs] = useState<string[]>([])
  const [showAllAPTs, setShowAllAPTs] = useState(false)
  const [dataPrivacyConsent, setDataPrivacyConsent] = useState(false)
  const [marketingConsent, setMarketingConsent] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [submitMessage, setSubmitMessage] = useState<{ type: 'success' | 'error', message: string } | null>(null)
  const [expandedAPT, setExpandedAPT] = useState<string | null>(null)

  const currentAPTs = (!selectedIndustry || selectedIndustry === "") 
    ? [] 
    : (industryAPTs[selectedIndustry as keyof typeof industryAPTs] || [])

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    setIsSubmitting(true)
    setSubmitMessage(null)

    if (!serviceType) {
      setSubmitMessage({ type: 'error', message: 'Please select a service type.' })
      setIsSubmitting(false)
      return
    }

    const formData = new FormData(e.currentTarget)
    
    // Prepare the data for submission
    const submissionData = {
      serviceType,
      selectedReasons: selectedReasons,
      selectedIndustry,
      selectedAPTs: selectedAPTs,
      dataPrivacyConsent,
      marketingConsent,
      firstName: formData.get('firstName'),
      lastName: formData.get('lastName'),
      email: formData.get('email'),
      phone: formData.get('phone'),
      company: formData.get('company'),
      employees: formData.get('employees'),
      locations: formData.get('locations'),
      budget: formData.get('budget'),
      timeline: formData.get('timeline'),
      message: formData.get('message'),
    }

    try {
      const response = await fetch('/api/pentest-request', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(submissionData),
      })

      const result = await response.json()

      if (response.ok && result.success) {
        setSubmitMessage({ type: 'success', message: 'Thank you! We\'ll be in touch within 24 hours.' })
        // Reset form
        setServiceType("")
        setSelectedReasons([])
        setSelectedIndustry("")
        setSelectedAPTs([])
        setDataPrivacyConsent(false)
        setMarketingConsent(false)
        e.currentTarget.reset()
      } else {
        setSubmitMessage({ type: 'error', message: result.message || 'An error occurred. Please try again.' })
      }
    } catch (error) {
      console.error('Submission error:', error)
      setSubmitMessage({ type: 'error', message: 'An error occurred. Please try again.' })
    } finally {
      setIsSubmitting(false)
    }
  }

  const toggleReason = (reasonId: string) => {
    setSelectedReasons(prev =>
      prev.includes(reasonId)
        ? prev.filter(id => id !== reasonId)
        : [...prev, reasonId]
    )
  }

  const toggleAPT = (aptId: string) => {
    setSelectedAPTs(prev =>
      prev.includes(aptId)
        ? prev.filter(id => id !== aptId)
        : [...prev, aptId]
    )
  }

  const isFormValid = serviceType && dataPrivacyConsent

  return (
    <section className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-50 dark:from-charcoal via-charcoal/95 to-charcoal">
      <div className="container py-12 max-w-4xl">
        <ScrollAnimation animation="fade">
          <div className="text-center mb-16">
            <h1 className="text-4xl md:text-6xl font-bold text-charcoal dark:text-white mb-6">
              Build a Penetration Test
            </h1>
            <p className="text-xl text-charcoal/70 dark:text-white/70 max-w-3xl mx-auto">
              Create a customized penetration testing proposal tailored to your organization's specific needs, industry,
              and threat landscape.
            </p>
          </div>
        </ScrollAnimation>

        <form onSubmit={handleSubmit} className="space-y-8">
          {/* Service Type Selection */}
          <ScrollAnimation animation="slide-up" delay={0.1}>
            <div className="bg-white dark:bg-charcoal/80 rounded-lg shadow-lg p-6">
              <h2 className="text-xl font-semibold mb-4 flex items-center">
                <svg className="w-6 h-6 mr-3 text-brandyellow" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                </svg>
                What type of service do you need?
              </h2>
              <div className="space-y-3">
                {/* Vulnerability Assessment */}
                <label className={cn(
                  "block p-4 rounded-lg border-2 cursor-pointer transition-all",
                  serviceType === "vulnerability-assessment"
                    ? "border-brandyellow bg-brandyellow/5"
                    : "border-gray-200 dark:border-gray-700 hover:border-gray-300"
                )}>
                  <input
                    type="radio"
                    name="serviceType"
                    value="vulnerability-assessment"
                    checked={serviceType === "vulnerability-assessment"}
                    onChange={(e) => setServiceType(e.target.value)}
                    className="sr-only"
                  />
                  <div className="flex items-start">
                    <div className={cn(
                      "w-5 h-5 rounded-full border-2 mr-3 mt-0.5 flex items-center justify-center",
                      serviceType === "vulnerability-assessment" ? "border-brandyellow" : "border-gray-400"
                    )}>
                      {serviceType === "vulnerability-assessment" && (
                        <div className="w-2.5 h-2.5 rounded-full bg-brandyellow" />
                      )}
                    </div>
                    <div>
                      <h3 className="font-semibold">Vulnerability Assessment</h3>
                      <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                        Automated scanning to identify known vulnerabilities and misconfigurations without exploitation.
                      </p>
                    </div>
                  </div>
                </label>

                {/* Penetration Test */}
                <label className={cn(
                  "block p-4 rounded-lg border-2 cursor-pointer transition-all",
                  serviceType === "penetration-test"
                    ? "border-brandyellow bg-brandyellow/5"
                    : "border-gray-200 dark:border-gray-700 hover:border-gray-300"
                )}>
                  <input
                    type="radio"
                    name="serviceType"
                    value="penetration-test"
                    checked={serviceType === "penetration-test"}
                    onChange={(e) => setServiceType(e.target.value)}
                    className="sr-only"
                  />
                  <div className="flex items-start">
                    <div className={cn(
                      "w-5 h-5 rounded-full border-2 mr-3 mt-0.5 flex items-center justify-center",
                      serviceType === "penetration-test" ? "border-brandyellow" : "border-gray-400"
                    )}>
                      {serviceType === "penetration-test" && (
                        <div className="w-2.5 h-2.5 rounded-full bg-brandyellow" />
                      )}
                    </div>
                    <div>
                      <h3 className="font-semibold">Penetration Test</h3>
                      <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                        Simulated cyber attacks to actively exploit vulnerabilities and demonstrate real-world impact to your systems and data.
                      </p>
                    </div>
                  </div>
                </label>

                {/* Threat-Led Pentest */}
                <label className={cn(
                  "block p-4 rounded-lg border-2 cursor-pointer transition-all",
                  serviceType === "threat-led-pentest"
                    ? "border-brandyellow bg-brandyellow/5"
                    : "border-gray-200 dark:border-gray-700 hover:border-gray-300"
                )}>
                  <input
                    type="radio"
                    name="serviceType"
                    value="threat-led-pentest"
                    checked={serviceType === "threat-led-pentest"}
                    onChange={(e) => setServiceType(e.target.value)}
                    className="sr-only"
                  />
                  <div className="flex items-start">
                    <div className={cn(
                      "w-5 h-5 rounded-full border-2 mr-3 mt-0.5 flex items-center justify-center",
                      serviceType === "threat-led-pentest" ? "border-brandyellow" : "border-gray-400"
                    )}>
                      {serviceType === "threat-led-pentest" && (
                        <div className="w-2.5 h-2.5 rounded-full bg-brandyellow" />
                      )}
                    </div>
                    <div>
                      <h3 className="font-semibold">Threat-Led Penetration Test</h3>
                      <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                        Advanced testing simulating specific threat actors (APT groups) targeting your industry using their known tactics and techniques.
                      </p>
                    </div>
                  </div>
                </label>

                {/* Red Team */}
                <label className={cn(
                  "block p-4 rounded-lg border-2 cursor-pointer transition-all",
                  serviceType === "red-team"
                    ? "border-brandyellow bg-brandyellow/5"
                    : "border-gray-200 dark:border-gray-700 hover:border-gray-300"
                )}>
                  <input
                    type="radio"
                    name="serviceType"
                    value="red-team"
                    checked={serviceType === "red-team"}
                    onChange={(e) => setServiceType(e.target.value)}
                    className="sr-only"
                  />
                  <div className="flex items-start">
                    <div className={cn(
                      "w-5 h-5 rounded-full border-2 mr-3 mt-0.5 flex items-center justify-center",
                      serviceType === "red-team" ? "border-brandyellow" : "border-gray-400"
                    )}>
                      {serviceType === "red-team" && (
                        <div className="w-2.5 h-2.5 rounded-full bg-brandyellow" />
                      )}
                    </div>
                    <div>
                      <h3 className="font-semibold">Red Team</h3>
                      <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                        Full-scale adversarial simulation testing your organization's detection and response capabilities against sophisticated attacks.
                      </p>
                    </div>
                  </div>
                </label>
              </div>
              {!serviceType && submitMessage?.type === 'error' && (
                <p className="text-red-500 text-sm mt-2">Please select a service type</p>
              )}
            </div>
          </ScrollAnimation>

          {/* Test Reasons - Only show for non-vulnerability assessment */}
          {serviceType && serviceType !== "vulnerability-assessment" && (
            <ScrollAnimation animation="slide-up" delay={0.2}>
              <div className="bg-white dark:bg-charcoal/80 rounded-lg shadow-lg p-6">
                <h2 className="text-xl font-semibold mb-4 flex items-center">
                  <svg className="w-6 h-6 mr-3 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                  </svg>
                  Why do you need a penetration test?
                </h2>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {testReasons.map((reason) => (
                    <label
                      key={reason.id}
                      className={cn(
                        "block p-4 rounded-lg border-2 cursor-pointer transition-all",
                        selectedReasons.includes(reason.id)
                          ? "border-blue-500 bg-blue-50 dark:bg-blue-900/20"
                          : "border-gray-200 dark:border-gray-700 hover:border-gray-300"
                      )}
                    >
                      <input
                        type="checkbox"
                        value={reason.id}
                        checked={selectedReasons.includes(reason.id)}
                        onChange={() => toggleReason(reason.id)}
                        className="sr-only"
                      />
                      <div className="flex items-start">
                        <div className={cn(
                          "w-5 h-5 rounded border-2 mr-3 mt-0.5 flex items-center justify-center",
                          selectedReasons.includes(reason.id) ? "border-blue-500 bg-blue-500" : "border-gray-400"
                        )}>
                          {selectedReasons.includes(reason.id) && (
                            <svg className="w-3 h-3 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={3} d="M5 13l4 4L19 7" />
                            </svg>
                          )}
                        </div>
                        <div>
                          <h3 className="font-semibold">{reason.label}</h3>
                          <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">{reason.description}</p>
                        </div>
                      </div>
                    </label>
                  ))}
                </div>
              </div>
            </ScrollAnimation>
          )}

          {/* Industry Selection */}
          {serviceType && (
            <ScrollAnimation animation="slide-up" delay={0.3}>
              <div className="bg-white dark:bg-charcoal/80 rounded-lg shadow-lg p-6">
                <h2 className="text-xl font-semibold mb-4 flex items-center">
                  <svg className="w-6 h-6 mr-3 text-brandyellow" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                  </svg>
                  Select Your Industry
                </h2>
                <select
                  value={selectedIndustry}
                  onChange={(e) => setSelectedIndustry(e.target.value)}
                  className="w-full p-3 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-charcoal text-charcoal dark:text-white focus:border-brandyellow focus:outline-none"
                >
                  <option value="">Choose your industry</option>
                  {industries.map((industry) => (
                    <option key={industry.value} value={industry.value}>
                      {industry.label}
                    </option>
                  ))}
                </select>
              </div>
            </ScrollAnimation>
          )}

          {/* Organization Details - Moved before contact info */}
          {serviceType && (
            <ScrollAnimation animation="slide-up" delay={0.4}>
              <div className="bg-white dark:bg-charcoal/80 rounded-lg shadow-lg p-6">
                <h2 className="text-xl font-semibold mb-4 flex items-center">
                  <svg className="w-6 h-6 mr-3 text-brandyellow" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                  </svg>
                  Organization Details
                </h2>
                <div className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <label htmlFor="employees" className="block text-sm font-medium mb-1">Number of Employees</label>
                      <select
                        id="employees"
                        name="employees"
                        className="w-full p-3 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-charcoal text-charcoal dark:text-white focus:border-brandyellow focus:outline-none"
                      >
                        <option value="">Select employee range</option>
                        {employeeRanges.map((range) => (
                          <option key={range.value} value={range.value}>
                            {range.label}
                          </option>
                        ))}
                      </select>
                    </div>
                    <div>
                      <label htmlFor="locations" className="block text-sm font-medium mb-1">Number of Locations</label>
                      <input
                        id="locations"
                        name="locations"
                        type="text"
                        placeholder="e.g., 3"
                        className="w-full p-3 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-charcoal text-charcoal dark:text-white focus:border-brandyellow focus:outline-none"
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <label htmlFor="budget" className="block text-sm font-medium mb-1">Estimated Budget</label>
                      <select
                        id="budget"
                        name="budget"
                        className="w-full p-3 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-charcoal text-charcoal dark:text-white focus:border-brandyellow focus:outline-none"
                      >
                        <option value="">Select budget range</option>
                        {budgetRanges.map((range) => (
                          <option key={range.value} value={range.value}>
                            {range.label}
                          </option>
                        ))}
                      </select>
                    </div>
                    <div>
                      <label htmlFor="timeline" className="block text-sm font-medium mb-1">Preferred Timeline</label>
                      <select
                        id="timeline"
                        name="timeline"
                        className="w-full p-3 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-charcoal text-charcoal dark:text-white focus:border-brandyellow focus:outline-none"
                      >
                        <option value="">Select timeline</option>
                        {timelines.map((timeline) => (
                          <option key={timeline.value} value={timeline.value}>
                            {timeline.label}
                          </option>
                        ))}
                      </select>
                    </div>
                  </div>
                </div>
              </div>
            </ScrollAnimation>
          )}

          {/* APT Selection - Only show for non-vulnerability assessment */}
          {serviceType && serviceType !== "vulnerability-assessment" && selectedIndustry && currentAPTs.length > 0 && (
            <ScrollAnimation animation="slide-up" delay={0.5}>
              <div className="bg-white dark:bg-charcoal/80 rounded-lg shadow-lg p-6">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-xl font-semibold flex items-center">
                    <svg className="w-6 h-6 mr-3 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                    </svg>
                    {showAllAPTs ? "All Threat Actors" : "Industry-Specific Threat Actors"}
                  </h2>
                  <button
                    type="button"
                    onClick={() => setShowAllAPTs(!showAllAPTs)}
                    className="text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400"
                  >
                    {showAllAPTs ? "Show Industry Specific" : "See All APTs"}
                  </button>
                </div>
                <div className="space-y-3">
                  {currentAPTs.map((apt) => (
                    <div key={apt.id} className="border border-gray-200 dark:border-gray-700 rounded-lg">
                      <label className="block p-4 cursor-pointer">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center">
                            <input
                              type="checkbox"
                              value={apt.id}
                              checked={selectedAPTs.includes(apt.id)}
                              onChange={() => toggleAPT(apt.id)}
                              className="mr-3"
                            />
                            <span className="font-medium">{apt.name}</span>
                          </div>
                          <button
                            type="button"
                            onClick={(e) => {
                              e.preventDefault()
                              setExpandedAPT(expandedAPT === apt.id ? null : apt.id)
                            }}
                            className="text-gray-500"
                          >
                            <svg
                              className={cn("w-5 h-5 transition-transform", expandedAPT === apt.id ? "rotate-180" : "")}
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke="currentColor"
                            >
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                            </svg>
                          </button>
                        </div>
                      </label>
                      {expandedAPT === apt.id && (
                        <div className="px-4 pb-3 text-sm text-gray-600 dark:text-gray-400 border-t border-gray-100 dark:border-gray-800">
                          {apt.description}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            </ScrollAnimation>
          )}

          {/* Contact Information */}
          {serviceType && (
            <ScrollAnimation animation="slide-up" delay={0.6}>
              <div className="bg-white dark:bg-charcoal/80 rounded-lg shadow-lg p-6">
                <h2 className="text-xl font-semibold mb-4 flex items-center">
                  <svg className="w-6 h-6 mr-3 text-brandyellow" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                  </svg>
                  Contact Information
                </h2>
                <div className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <label htmlFor="firstName" className="block text-sm font-medium mb-1">First Name *</label>
                      <input
                        id="firstName"
                        name="firstName"
                        type="text"
                        required
                        className="w-full p-3 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-charcoal text-charcoal dark:text-white focus:border-brandyellow focus:outline-none"
                      />
                    </div>
                    <div>
                      <label htmlFor="lastName" className="block text-sm font-medium mb-1">Last Name *</label>
                      <input
                        id="lastName"
                        name="lastName"
                        type="text"
                        required
                        className="w-full p-3 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-charcoal text-charcoal dark:text-white focus:border-brandyellow focus:outline-none"
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <label htmlFor="email" className="block text-sm font-medium mb-1">Email Address *</label>
                      <input
                        id="email"
                        name="email"
                        type="email"
                        required
                        className="w-full p-3 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-charcoal text-charcoal dark:text-white focus:border-brandyellow focus:outline-none"
                      />
                    </div>
                    <div>
                      <label htmlFor="phone" className="block text-sm font-medium mb-1">Phone Number</label>
                      <input
                        id="phone"
                        name="phone"
                        type="tel"
                        className="w-full p-3 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-charcoal text-charcoal dark:text-white focus:border-brandyellow focus:outline-none"
                      />
                    </div>
                  </div>

                  <div>
                    <label htmlFor="company" className="block text-sm font-medium mb-1">Company Name *</label>
                    <input
                      id="company"
                      name="company"
                      type="text"
                      required
                      className="w-full p-3 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-charcoal text-charcoal dark:text-white focus:border-brandyellow focus:outline-none"
                    />
                  </div>

                  <div>
                    <label htmlFor="message" className="block text-sm font-medium mb-1">Additional Information</label>
                    <textarea
                      id="message"
                      name="message"
                      rows={4}
                      placeholder="Any specific requirements or additional details..."
                      className="w-full p-3 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-charcoal text-charcoal dark:text-white focus:border-brandyellow focus:outline-none"
                    />
                  </div>
                </div>
              </div>
            </ScrollAnimation>
          )}

          {/* Consent and Submit */}
          {serviceType && (
            <ScrollAnimation animation="slide-up" delay={0.7}>
              <div className="bg-white dark:bg-charcoal/80 rounded-lg shadow-lg p-6">
                <div className="space-y-4 mb-6">
                  <label className="flex items-start">
                    <input
                      type="checkbox"
                      checked={dataPrivacyConsent}
                      onChange={(e) => setDataPrivacyConsent(e.target.checked)}
                      className="mt-1 mr-3"
                    />
                    <span className="text-sm text-charcoal dark:text-white/90">
                      I consent to the processing of my personal data as outlined in the privacy policy. *
                    </span>
                  </label>
                  <label className="flex items-start">
                    <input
                      type="checkbox"
                      checked={marketingConsent}
                      onChange={(e) => setMarketingConsent(e.target.checked)}
                      className="mt-1 mr-3"
                    />
                    <span className="text-sm text-charcoal dark:text-white/90">
                      I would like to receive marketing communications about your services.
                    </span>
                  </label>
                </div>

                <div className="text-center">
                  <button
                    type="submit"
                    disabled={isSubmitting || !isFormValid}
                    className={cn(
                      "font-bold px-12 py-4 text-lg rounded-lg transition-all",
                      isFormValid
                        ? "bg-brandyellow hover:bg-brightyellow text-charcoal"
                        : "bg-gray-300 text-gray-500 cursor-not-allowed"
                    )}
                  >
                    {isSubmitting ? "Submitting..." : "Request Custom Quote"}
                  </button>
                  {!isFormValid && (
                    <p className="text-sm text-gray-500 mt-2">
                      Please select a service type and accept the privacy policy
                    </p>
                  )}

                  {submitMessage && (
                    <div className={cn(
                      "mt-4 p-4 rounded-lg",
                      submitMessage.type === "success" 
                        ? "bg-green-50 text-green-800 dark:bg-green-900/20 dark:text-green-200" 
                        : "bg-red-50 text-red-800 dark:bg-red-900/20 dark:text-red-200"
                    )}>
                      {submitMessage.message}
                    </div>
                  )}
                </div>
              </div>
            </ScrollAnimation>
          )}
        </form>
      </div>
    </section>
  )
}